{
  "html": [
    {
      "page": "html",
      "title": "HTML 4 X HTML 5",
      "img": "https://cdn.discordapp.com/attachments/878488898974658602/912341275636817940/Art_1_Html5-vs-Html4.jpg",
      "subtitle": "Diferenças entre as  versões 4 e 5 do HTML",
      "article": " <p>O HTML4 ocupou lugar de destaque no mundo web por muitos anos. Ainda teremos um bom tempo de espera até que o HTML5 se torne de fato um padrão na web e que todos os browsers e tecnologias afins o assumam como centro de implementação. Como programador web, é muito interessante que saiba quais as principais diferenças entre ambas as versões, justamente para que possa poupar tempo e aumentar a produtividade em situações como essa.</p>\n    <br>\n    <p>Uma das características mais marcantes dessa nova versão da linguagem é o fato de que ela não é uma versão final – isto é: seguirá mudando ao longo do tempo. Isso inclui dizer que os desenvolvedores da linguagem estarão sempre adicionando e removendo atributos, tags e o que considerarem interessantes a ela. Ao mesmo tempo, constitui um risco se você estiver usando HTML 5 como algo definitivo no seu projeto. Isso significa que se optar pela linguagem mais recente terá de seguir suas atualizações e estar constantemente evoluindo seu código.</p>\n<br>\n    <p>O HTML5 foi feito para ser simples, o que implica em uma sintaxe extremamente mais simples e limpa. A simples declaração do doctype foi mais uma das facilidades incluídas na nova versão. Agora, você precisa inserir apenas um <!doctype html> no início do seu documento e tudo estará pronto. Além disso, a sintaxe do HTML5 é compatível também com o HTML4 e o XHTML1.</p>\n<br>\n    <p>A linguagem apresenta um elemento novo, o &lt;canvas&gt, responsável por substituir muitas das implementações antes feitas em Flash. Muitos desenvolvedores o veem como obsoleto e futuramente morto.</p>\n    <p>A extensão de tags a um tool de novos e interessantes recursos fez uma grande diferença na linguagem. Tags como &lt;header&gt e &lt;footer&gt (que estendem a funcionalidade de tabelas para a página como um todo), &lt;section&gt e &lt;article&gt (que permitem marcar áreas específicas dos layouts), &lt;video&gt e &lt;audio&gt(para uma inclusão melhorada de conteúdos multimídia nas páginas) e &lt;menu&gt e &lt;figure&gt(para bem arranjar textos, imagens e menus) trazem todo um conjunto de implementações e funcionalidades bastante pertinentes para a web de hoje.</p>\n   <br>\n\n    <p>A remoção de alguns recursos como as <em>tags\n    </em>&lt;center&gt;, &lt;big&gt;, &lt;font&gt;, etc fazem com que a responsabilidade do CSS aliado à nova linguagem só aumente, otimizando o desenvolvimento <em>front-end.</em></p> "
    },
    {
      "page": "html",
      "title": "TAGS HTML5",
      "img": "https://cdn.discordapp.com/attachments/878488898974658602/912346166358847508/Art_2_Tags_HTML5.jpg",
      "subtitle": "Lista com as principais tags HTML 5",
      "article": "<h3>1. HTML</h3>\n    <p>Tag HTML é aquela que informa aos navegadores que o documento tem um código HTML:</p>\n<br>\n    <ul>\n        <li>&lt;html&gt;  &lt;/html&gt;</li>\n    </ul>\n<br>\n    <h3>2.Titulo</h3>\n    <p>Title é o título da página da web, que identifica o seu site na internet:</p>\n<br>\n    <ul>\n        <li>&lt;title&gt;  &lt;/title&gt;</li>\n    </ul>\n<br>\n    <h3>3. Cabeçalho</h3>\n    <p>Tag head é o cabeçalho do documento HTML, onde estão as informações sobre a identificação e funcionamento do site.</p>\n    <p>Também é ele que carrega os metadados, incluindo título interno de páginas e codificação do documento.</p>\n<br>\n    <ul>\n        <li>&lt;head&gt;  &lt;/head&gt;</li>\n    </ul>\n<br>\n    <h3>4.Corpo</h3>\n    <p>Representado pela abertura &lt;body&gt; e fechamento &lt;/body&gt; é no corpo dos códigos HTML que se concentram imagens, textos, vídeos e outras funcionalidades do conteúdo.</p>\n<br>\n    <ul>\n        <li>&lt;body&gt;  &lt;/body&gt;</li>\n    </ul>\n<br>\n\n    <h3>5.Imagens</h3>\n    <p>Representadas pela tag &lt;img&gt; as imagens podem ser inseridas in-line com os seguintes atributos comuns:</p>\n<br>\n    <ul>\n        <li><strong>align</strong>: é o alinhamento da imagem, que pode ser ainda top (topo), middle (meio), bottom (alinha a imagem com a base dos outros elementos da linha), left (à esquerda) ou right (à direita). </li><br>\n      \n        <li><strong>alt</strong>: é o atributo que exibe um texto alternativo em navegadores que não suportam imagens ou que são acessados por deficientes visuais.\n        </li><br>\n       \n        <li><strong>border</strong>: se refere à largura da borda da imagem.\n        </li><br>\n     \n        <li><strong>height</strong>: altura sugerida em pixels.\n        </li><br>\n\n        <li><strong>hspace</strong>:  indica o espaço entre imagem e texto que aparece à esquerda e à direita.\n        </li><br>\n\n        <li><strong>src</strong>: sinaliza a URL da imagem.\n        </li><br>\n\n        <li><strong>title</strong>: indica o texto que vai aparecer quando se passar o mouse sobre a imagem.\n        </li><br>\n\n        <li><strong>usemap</strong>:  mostra o mapeamento usado.\n        </li><br>\n\n        <li><strong>vspace</strong>: espaço entre imagem e texto que vem acima e abaixo.\n        </li><br>\n\n        <li><strong>width</strong>: extensão da imagem, em pixels.\n        </li><br>\n\n    </ul>\n    <p>Exemplo: &lt;img src=“exemplo-de-imagem.png” alt=“Texto alternativo” title=“Exemplo” /></p>\n<br>\n    <h3>6. Hiperlinks</h3>\n    <p>Hiperlinks são os atributos que servem para criar links e, assim, levar o usuário para outros sites ou páginas.</p>\n    <ul>\n        <li>&lt;a&gt;  &lt;/a&gt;</li>\n    </ul>\n<br>\n    <p>Exemplo: &lt;a href=“https://www.teste.com\">Teste.com&lt;/a&gt;</p>\n<br>\n    <h3>7. Listas</h3>\n    <p>HTML tem três tipos de listas use os atributos type e start para fazer a sua lista, dependendo dos seus interesses.</p>\n    <p><strong>Seguem os tipos de listas e suas definições:</strong></p>\n<br>\n    <ul>\n        <li><strong>&lt;ol&gt; </strong>: mostra as lista ordenada com números. </li><br>\n        <li><strong>&lt;ul&gt; </strong>: mostra as lista desordenada com pontos. </li><br>\n        <li><strong>&lt;dl&gt; </strong>: mostra as lista definições.</li><br>\n    </ul>"
    },
    {
      "page": "html",
      "title": "TAGS SEMÂNTICAS HTML5",
      "img": "https://cdn.discordapp.com/attachments/878488898974658602/912352002388934676/Art_3_Tags_Semanticas_HTML5jpg.jpg",
      "subtitle": "Conhecendo os elementos semânticos do HTML5",
      "article": "<p>O HTML é como o esqueleto que dará forma às páginas. É a estrutura mais básica. Ele setoriza as diversas partes da página de acordo com o seu conteúdo, ou seja, ajuda a endereçar cada um dos elementos que a constitui, como os textos, imagens, menu de navegação, links, dentre outros. Posteriormente ele irá auxiliar a aplicação de outras funcionalidades a um site.</p>\n    <p> Na versão o HTML5 também é responsável por descrever o significado do conteúdo presente nas páginas, visando facilitar  mecanismos de busca do Google e outros sites de pesquisa identifiquem o conteúdo da página o que façam mais sentido para os mecanismos de pesquisa (Search Engine Optimization - SEO).</p>\n\n    <br>\n\n    <p>Vamos explicar algumas dessas tags semanticas:</p>\n<br>\n    <h2><stromg>&lt; nav &gt;</stromg></h2>\n    <p>A tag &lt; nav &gt; é um dos elementos HTML5 . É usado para especificar um bloco de links de navegação, no documento atual ou para outros documentos. Exemplos de blocos de navegação são menus e índices. </p>\n    <p>Exemplo de código:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912349586616635412/art3_nav.PNG\" alt=\"codigo nav\">\n\n    <h2><stromg>&lt; header &gt;</stromg></h2>\n    <p>A tag &lt; header &gt; é normalmente usada para definir o cabeçalho da página, essa  tag tambem pode definir um cabeçalho dentro de uma &lt; section &gt;. Normalmente essa tag possui tags de titulos com h1, h2,h3, h4, h5 ou h6.</p>\n    <p>É comum utilizá-lo para incluir a logo da empresa ou entidade, título da página, slogan ou uma descrição sobre a página/negócio.</p>\n    <p>Exemplo de código:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912349814581243974/art3_header.PNG\" alt=\"codigo header\">\n\n    <h2><stromg>&lt; main &gt;</stromg></h2>\n    <p>A tag &lt; main &gt;  define o conteudo principal do site, aquele conteúdo de maior importâcia que voce pretende passar ao seu usuário</p>\n    <p>Só deve haver uma tag main por página, evitando o repetimento de barras laterais , links de navegação , logotipos e etc dentro dessa tag.</p>\n    <p>Exemplo de código:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912350405994889226/art3_main.PNG\" alt=\"codigo header\">\n\n    <h2><stromg>&lt; section &gt;</stromg></h2>\n    <p>A tag &lt; section &gt;  é utilizada para marcar as seções de conteúdo de uma página. Com Esse elemento agrupamos de forma lógica nosso conteúdo, separando a informação em áreas diferentes. O principal objetivo é retirar essa responsabilidade das divs. Tendo como principal diferencial a navegação semântica com HTML 5.</p>\n    <p>Só deve haver uma tag main por página, evitando o repetimento de barras laterais , links de navegação , logotipos e etc dentro dessa tag.</p>\n    <p>Por exemplo, um menu de navegação deve estar dentro um elemento  &lt; nav &gt, mas uma lista de resultados de pesquisa ou a exibição de um mapa e seus controles não possuem elementos específicos, e podem ser colocados dentro de uma &lt; section &gt.</p>\n    <p>Exemplo de código:</p>\n\n\n\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912350758228336640/art3_section.PNG\" alt=\"codigo header\">\n\n    <h2><stromg>&lt; article &gt;</stromg></h2>\n    <p>A tag &lt; article &gt; identifica uma parte independente de conteúdo que poderia, teoricamente, ser distribuída para outros sites e plataformas como uma unidade independente. É uma boa opção para conter postagens inteiras de blog, artigos de notícias e conteúdo semelhante.</p>\n    <p>Exemplo de código:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912348951993278534/art3_article.PNG\" alt=\"codigo header\">\n\n    <h2><stromg>&lt; figure &gt;</stromg></h2>\n    <p>A tag &lt; figure &gt; é utilizada para envolver a inserção de figuras/imagens e seus atributos. Trás a possibilidade de atribuição de descrição da figura através da tag &lt; figcaption &gt;, envolvendo tudo isto em um elemento específico.</p>\n    <p>Exemplo de código:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912351026055635004/art3_figure.PNG\" alt=\"codigo header\">\n\n    <h2><stromg>&lt; aside &gt;</stromg></h2>\n    <p>A tag &lt; aside &gt;  é utilizada quando buscamos enfatizar um trecho de um conteúdo/artigo na página. Ou até mesmo para dispor um conteúdo à parte do restante da página, como uma sidebar.</p>\n    <p>É utilizado principalmente quando queremos chamar atenção para uma informação adicional ou enfatizar um trecho de texto que, sendo semanticamente ‘codada’ dentro de &lt; aside &gt será posicionado separadamente do conteúdo principal.</p>\n    <p>Exemplo de código:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912349187394371644/art3_aside.PNG\" alt=\"codigo header\">\n\n    <h2><stromg>&lt; footer &gt;</stromg></h2>\n    <p>A tag &lt; footer &gt;  define um rodapé para um documento ou seção.</p>\n    <p>Dentro dessa tag colocamos as seguintes informações:</p>\n<br>\n    <ul>\n        <li>Informação de autoria</li>\n        <li>Informações sobre direitos autorais</li>\n        <li>Informações de Contato</li>\n        <li>Mapa do site</li>\n        <li>Voltar aos links principais</li>\n        <li>Documentos relacionados</li>\n        \n\n\n\n    </ul>\n    <p>Exemplo de código:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912349187394371644/art3_aside.PNG\" alt=\"codigo header\">"
    },
    {
      "page": "html",
      "title": "EDITORES HTML",
      "img": "https://cdn.discordapp.com/attachments/878488898974658602/912354259918553088/Art_4_Editores_HTML.jpg",
      "subtitle": "Conhecendo alguns dos principais editores HTML",
      "article": "<p>Um editor de HTML é um software para edição e criação de código HTML que é usado para sites ou outros documentos da web. Com editores de HTML baseados em texto, o código-fonte pode ser editado diretamente. Os editores WYSIWYG exibem o documento a ser editado da mesma forma que será exibido no navegador posteriormente. Os editores de HTML geralmente fazem parte de um ambiente de desenvolvimento integrado .</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912352777391460422/art4_principal.PNG\" alt=\"principal\">\n<br>\n    <h2>Vamos citar alguns dos principais editores HTML:</h2>\n<br>\n\n\n    <h2>1.Atom </h2>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912352897545666620/art4_atom.PNG\" alt=\"atom\">\n    <p>O Atom é um editor de texto gratuito desenvolvido pelo GitHub e sua comunidade. Algumas de suas características são: compartilhamento de código em tempo real; conexão direta com repositório Git e GitHub; gerenciamento de pacotes de funcionalidades; sistema de preenchimento de código automático; instalação em Windows, OS X e Linux; Ideal para HTML e outras linguagens Web.</p>\n<br>\n    <h2>2. Sublime Text </h2>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912353111614562314/art4_Sublime.PNG\" alt=\"Sublime\">\n    <p>O Sublime Text é um editor de texto para código e marcação de dados. Ele é pago, mas pode ser testado gratuitamente. Suas características são: atalhos de teclado inteligentes; múltiplas seleções e alterações simultâneas; API e pacotes; edição divida de scripts; interruptor instantâneo de projeto; licença cruzada de plataformas; editor HTML completo e outras linguagens Web.</p>\n<br>\n    <h2>3. Visual Studio Code </h2>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912353239549231184/art4_VS_CODE.PNG\" alt=\"VS_CODE\">\n    <p>O Visual Studio Code é um editor de texto gratuito desenvolvido pela Microsoft. Algumas de suas características são: recurso IntelliSense para preenchimento automático de variáveis e funções; depuração; Git incorporado; extensível e personalizável; instalação em Windows, Linux e Mac.</p>\n<br>\n    <h2>4. Notepad++</h2>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912353415231836200/art4_VS_notepad.PNG\" alt=\"notepad++\">\n    <p>O Notepad++ é um editor de texto gratuito e simples, muito popular na Web, ideal para edições rápidas. Ele possui diversos recursos e alguns deles são: realce de sintaxe; mapeamento do documento; preenchimento automático; compatibilidade com diversas linguagens; gravação de macros; editor HTML completo; abertura de múltiplos documentos e vistas.</p>\n\n\n<br>\n    <h2>5. Eclipse </h2>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912353548551991306/art4_VS_eclipse.PNG\" alt=\"eclipse\">\n    <p>O Eclipse é um IDE completo, bem popular para programadores JAVA, mas é compatível com diversas linguagens e é totalmente extensível. Ele é um dos mais conceituados ambientes de programação e conta também com um editor de texto completo. Existem versões alternativas de distribuições para desenvolvimento web com HTML, PHP e Android.</p>"
    },
    {
      "page": "html",
      "title": "FORMULÁRIOS E ENTRADAS (INPUTS) EM HTML",
      "img": "https://cdn.discordapp.com/attachments/878488898974658602/912357867313569802/Art_5_Formularios_e_Entradas_inputsHTML.jpg",
      "subtitle": "Conhecendo formulários html",
      "article": "<p>Formulários HTML são um dos principais pontos de interação entre um usuário e um web site ou aplicativo. Eles permitem que os usuários enviem dados para o web site. Na maior parte do tempo, os dados são enviados para o servidor da web, mas a página da web também pode interceptar para usá-los por conta própria.</p>\n<br>\n    <h2>Formulários</h2>\n    <p>Os elementos de formulário são elementos que permitem o usuário entrar informação (como campos de texto, campos de área de texto, menus drop-down, botões radiais, caixas de seleção, etc.) em um formulário.</p>\n    <p>Um formulário é definido pela tag &lt; form &gt;,</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356303869980702/art5_form.png\" alt=\"form\">\n    <p>Com essa saida:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356304192958514/art5_form_saida.png\" alt=\"form_saida\">\n<br>\n    <h2>Entrada (Input)</h2>\n    <p>É usado para criar controles interativos para formulários baseados na web para receber dados do usuário. A semântica de um &lt; input &gt; varia consideravelmente dependendo do valor de seu atributo type.   </p>\n<br>\n    <h3>Campo de Texto</h3>\n    <p>Os campos de texto são usados quando você quer que o usuário digite letras, números, etc. em um formulário.</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356304473964614/art5_input_text.png\" alt=\"form\">\n    <p>Com essa saida:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356304763363378/art5_input_text_saida.png\" alt=\"form\">\n    <br>\n    <h2>Botões Radiais</h2>\n    <p>Os botões de rádio são usados para permitir aos usuários escolher uma opção de uma lista de opções. Para ser possível fazer esse tipo de formulário, primeiro iremos precisar de dar nome aos campos.</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356305094737930/art5_radio.png\" alt=\"form\">\n    <p>Com essa saida:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356305296056350/art5_radio_saida.png\" alt=\"form\">\n<br>\n    <h2>Checkbox</h2>\n    <p>O HTML checkbox, que também é chamado de caixa de checagem, é um dos tipos disponíveis no elemento &lt; input &gt;, que significa entrada, e é utilizado quando queremos permitir que a pessoa usuária da aplicação selecione uma ou mais alternativas entre as opções disponíveis.</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356306017472512/art5_checkbox.png\" alt=\"checkbox\">\n    <p>Com essa saida:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912357369357406248/art5_checkbox_saida.png\" alt=\"checkbox\">\n    <br>\n    <h2>O Atributo Ação do Formulário (Form's Action) e o Botão Enviar (Submit)</h2>\n    <p>Quando o usuário clica no botão \"Enviar\", o conteúdo do formulário é enviado para outro arquivo. O atributo de ação do formulário define o nome do arquivo para o qual enviar o conteúdo. O arquivo definido no atributo action geralmente faz algo com a entrada recebida.</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356305518334012/art5_submit.png\" alt=\"checkbox\">\n    <p>Com essa saida:</p>\n    <img src=\"https://cdn.discordapp.com/attachments/878488898974658602/912356305790976000/art5_submit_saida.png\" alt=\"checkbox\">"
    }
  ],
  "css": [
    {
      "page": "css",
      "title": "O QUE É CSS",
      "img": "https://www.chiefofdesign.com.br/wp-content/uploads/2018/08/thumbs-YT-HTML.png",
      "subtitle": "Para que server e sua importância",
      "article": "<h2>Para que serve o CSS e sua importância</h2>\n<br/>\n  <p><strong>CSS</strong>: O design de um site é fundamental para quem acessa seu conteúdo. Portanto, deve ter uma boa aparência e ter uma usabilidade muito amigável, tornando mais fácil </p><p>para os visitantes encontrarem as informações que procuram, caso contrário, eles desaparecerão em menos tempo do que leva para encontrá-las. Portanto, CSS fornece suporte</p><p> nativo para tornar a formatação de páginas da web muito simples.</p>\n<br/>\n  <p><strong>CSS</strong> é chamado de linguagem <strong>Cascading Style Sheet</strong>, e é usado para definir o estilo de elementosescritos em uma linguagem de marcação, como HTML.</p><p>CSS separa o conteúdo da apresentação visual do site. Use CSS para alterar o texto e a cor do fundo, a fonte e o espaçamento entre os parágrafos.</p><p>Você também pode criar tabelas, usar alterações de layout, ajustar as imagens de suas respectivas telas e muito mais. </p>\n<br/>\n\n<img src=\"https://cdn.discordapp.com/attachments/903657891091861564/913533536802320434/56dd4dc9c44936865315a59190c41cf1.png\"/>\n\n\n  <h2>Importância do css</h2>\n<br/>\n  <p>Além de melhorar o visual do site, o CSS também é responsável por:</p>\n<br/>\n  <ul><li><p>Deixar o site responsivo (Site se adequar melhor a vários tipos de tela e resoluções)</p></li><li><p>Controlar os layouts de vários documentos a partir de um único, deixar os códigos mais limpos e organizados, fazer transições e animações que fazem uma experiencia melhor ao usurário.</p></li>\n</ul>"
    },
    {
      "page": "css",
      "title": "COMO INTEGRAR O CSS NO HTML?",
      "img": "https://i1.wp.com/www.tecforest.com.br/wp-content/uploads/2019/04/Como-Linkar-Folhas-de-Estilo-CSS-no-HTML-1.png?resize=700%2C362&ssl=1",
      "subtitle": "",
      "article": "<h1>Como integrar o CSS no HTML?</h1>\n<br/>\n  <h2>CSS Externo:</h2>\n<br/>\n\n<p>Crie um arquivo com .css no final, para ser reconhecido como um arquivo de CSS.\nPara integrar o CSS no HTML é necessário que use um arquivo de CSS</p><p> e avise o HTML que existe um arquivo de estilo, consulte o exemplo: <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"> Esta tag indicará ao HTML que ele possui um arquivo CSS para adicionar à página.</p><p> Isso deve ser adicionado à tag <head> </head> do HTML.</p>\n<br/>\n  <p>Veja um exemplo de <strong>CSS externo</strong>:</p>\n<br/>\n<img src=\"https://cdn.discordapp.com/attachments/638595322075021322/913514137051598898/unknown.png\"/>\n <br/>\n<br/>\n\n<p><strong>Inline (em linha)</strong> – Aplique as regras CSS para elementos específicos.  </p>\n\n  <img src=\"https://cdn.discordapp.com/attachments/638595322075021322/913514168018169886/unknown.png\"/>\n <br/>\n<br/>\n  <p><strong>Declarar na mesma página</strong> - Adicionar a tag \"style\" na seção do documento HTML. </p>\n<img src=\"https://cdn.discordapp.com/attachments/638595322075021322/913514184690515998/unknown.png\"/>"
    },
    {
      "page": "css",
      "title": "COMO CSS FUNCIONA",
      "img": "https://i.workana.com/wp-content/uploads/2018/11/css-1.jpg",
      "subtitle": "",
      "article": "<p>O CSS é uma ferramenta muito boa que possibilita criar diversas funcionalidades ao invés de usar JavaScript ou outra linguagem mais pesada.</p>\n</br>\n<p>Com o Cascading Style Sheets (CSS) é possível criar animações complexas, criar efeitos com uso de parallax, que faz parecer que a imagem de fundo tem uma profundidade diferente um dos outros, criar sites interativos e também jogos com HTML5 e CSS3.</p>\n<h1>SINTAXE CSS</h1>\n</br>\n<p>A estrutura da sintaxe CSS é bem simples. É formada por uma regra de 3 itens fundamentais para definir um estilo. São eles:</p>\n</br>\n<ul>\n  <li><p>Seletor</p></li>\n</br>\n  <li><p>Propriedade</p></li>\n</br>\n  <li><p>Valor</p></li>\n  </ul>\n</br>\n<h2>Veja o exemplo a seguir:</h2>\n</br>\n<img src=\"https://cdn.discordapp.com/attachments/903657891091861564/913518820004601876/unknown.png\"/>\n </br>\n<ul>\n  <li><p><strong>Seletor</strong> - Ele seleciona o elemento a ser estilizado (neste caso, o elemento \"p\"). Para estilizar outro elemento, basta alterar o seletor.</p></li>\n</br>\n  <li><p><strong>Declaração</strong>- Uma regra simples, como color: red; especifique os atributos do elemento a serem estilizados.</p></li>\n  <li><p><strong>Propriedades</strong> Forma de como você estilizar elementos HTML. (Nesse caso, o color é um atributo do elemento \"p\".) Em CSS, você pode escolher quais atributos deseja que afetem a regra.</p></li>\n</br>\n  <li><p><strong>Valor da propriedade </strong> No lado direito do atributo, após os dois pontos, temos o valor do atributo, que seleciona uma das muitas aparências possíveis para um determinado. Além do red (vermelho), há muitos valores de color (cores)</p></li>\n</ul>\n<p>O seletor \"p\" que usamos no exemplo anterior é um seletor de tipo de elemento. Esse tipo de seletor identifica e vincula um elemento HTML e só precisa usar esse elemento como um seletor.</p>\n    </br>\n\n  <p>Seletor de tipo id deve ser criado com o nome e posteriormente pelo símbolo #.</p>\n<img src=\"https://cdn.discordapp.com/attachments/878387189539569664/913519983882022942/unknown.png\"/>\n</br>\n \n  <p>Seletor de tipo class deve ser criado com o nome e posteriormente por um ponto “.”</p>\n<img src=\"https://cdn.discordapp.com/attachments/878387189539569664/913520310383423538/unknown.png\"/>\n </br>\n    <ul>\n      <li><p>Cada linha de comando deve ser envolvida em chaves ({}).</p></li>\n<li><p>Dentro de cada declaração, você deve usar dois pontos (:) para separar a propriedade de seus valores.</p></li>\n<li><p>Dentro de cada conjunto de regras, você deve usar um ponto e vírgula (;) para separar cada declaração da próxima.</p></li>\n</ul>\n<p>Então para modificar múltiplos valores de propriedades de uma vez, você deve escrevê-los separados por ponto e vírgula, desse modo: </p>\n</br>\n\n<img src=\"https://cdn.discordapp.com/attachments/878387189539569664/913521171629211728/unknown.png\"/>"
    },
    {
      "page": "css",
      "title": "UNIDADES DE MEDIDAS NO CSS",
      "img": "https://cdn-thumbs.comidoc.net/750/1341268_c20e_3.jpg",
      "subtitle": "",
      "article": "A unidade de medida no CSS tem como objetivo definir o tamanho de uma propriedade:\n<br/>\n\nExistem as unidades absolutas e unidades relativas:\n<br/>\n<p>Algumas unidades de medidas</p>\n<p>Unidades absolutas, são unidades de medidas fixas, ela não depende do elemento pai ou do tamanho da tela.</p>\n<br/>\n<h3>São elas :</h3>\n<br/>\n<ul>\n  <li><p>Pixel (<strong>px</strong>)</p></li>\n\n  <li><p>points (<strong>pt</strong>)</p></li>\n\n  <li><p>inches / polegadas (<strong>in</strong>)</p></li>\n\n  <li><p>centímetros (<strong>cm</strong>)</p></li>\n\n  <li><p>milímetros (<strong>mm</strong>)</p></li>\n</ul>\n<br/>\n<p>Unidades relativas, são dependentes do elemento pai ou do tamanho da tela. São mais utilizadas para fazer um site responsivo.</p>\n<br/>\n<h3>São elas : </h3>\n<br/>\n<ul>\n  <li><p>Visor mínimo (<strong>vmin</strong>)</p></li>\n\n  <li><p>Visor máximo (<strong>vmax</strong>)</p></li>\n\n  <li><p>Viewport Width (<strong>vw</strong>)</p></li>\n\n  <li><p>Viewport Height (<strong>vh</strong>)</p></li>\n</ul>\n<br/>\n<p>Aqui vai algumas <strong>unidades de medidas</strong> e suas funções:</p>\n<br/>\n<ul>\n<li><p><strong>cm</strong> - centímetros</p></li>\n<li><p><strong>mm</strong> - milímetros</p></li>\n<li><p><strong>in</strong> - polegadas</p></li>\n<li><p><strong>px</strong> - pixels</p></li>\n<li><p><strong>pt </strong>- pontos</p></li>\n<li><p><strong>pc</strong> - paica</p></li>\n<li><p><strong>em</strong> - 1em é uma vez o font-size do elemento</p></li>\n<li><p><strong>rem</strong> - 1rem é uma vez o font-size do elemento acima na hierarquia de elementos</p></li>\n<li><p><strong>vw</strong> - 1vw é 1% da largura da janela do navegador</p></li>\n<li><p><strong>vh</strong> - 1vh é 1% da altura da janela do navegador</p></li>\n<li><p><strong>vmin</strong> - 1vmin é 1% da menor dimensão da janela do navegador</p></li>\n<li><p><strong>vmax</strong> -    1vmax é 1% da maior dimensão da janela do navegador</p></li>\n<li><p><strong>%</strong> -    calcula o tamanho relativo ao elemento pai</p></li>\n</ul>\n\n<br/>\n  <p>Fonte: <a href=\"https://www.devmedia.com.br/css-unidades/41239\">https://www.devmedia.com.br/css-unidades/41239</a> </p>\n<br/>\n  <p><strong>px</strong> – é a unidade de pixels.</p>\n<br/>\nfont-size: 20px;\nmargin: 45px;\n<br/>\n<br/>\n  <p><strong>%</strong> - é unidade de porcentagens, se um bloco tem 50 pixels e for atribuído 50% dele, equivale a 25 pixels.</p>\n<br/>\nfont-size: 80%;\nheight: 40%;\n<br/>\n<br/>\n  <p><strong>em</strong> – Aplica-se ao tamanho da fonte. Usando o tamanho padrão do dispositivo do usuário, podemos usar esta unidade para expressar o tamanho da fonte de outros elementos.</p>\n<p>Portanto, os elementos com tamanho de fonte 2em (font-size: 2em) têm o dobro do tamanho padrão. Se o tamanho padrão for 8 pixels, a fonte 2em é igual a 16 pixels. Exemplo de sintaxe:</p>\n\n<br/>\nFont-size: 1,25em;\nFont-size: 0,5em;\n<br/>\n<br/>\n  <p><strong>Hexadecimal</strong> – é unidade de numeração que representa os números em base 16, é composto por números de 0 a 9 e seis letras adicionais da letra A até F. É mais utilizada para definir cores usando o sistema de “hex colors” rgb.</p>\n<br/>\nbackground-color: #ffffff;\ncolor: #000000;```"
    },
    {
      "page": "css",
      "title": "PROPRIEDADES CSS",
      "img": "https://www.codingninjas.com/blog/wp-content/uploads/2020/08/Blog-32.png",
      "subtitle": "",
      "article": "<ul>\n<li><p><strong>background</strong> – Define cor de fundo, imagem ou transparência.</p></li>\n<li><p><strong>background-image</strong> -Imagem de fundo.</p></li>\n<li><p><strong>background-color</strong> - Cor de fundo ou transparência.</p></li>\n<li><p><strong>border </strong> - Largura, estilo e cor de todas as 4 bordas.</p></li>\n<li><p><strong>border-bottom</strong> - Largura, estilo e cor da borda inferior.</p></li>\n<li><p><strong>border-left</strong> -    Largura, estilo e cor da borda esquerda.</p></li>\n<li><p><strong>border-right</strong> - Largura, estilo e cor da borda direita.</p></li>\n<li><p><strong>border-top</strong> - Largura, estilo e cor da borda superior.</p></li>\n<li><p><strong>border-width</strong> - Largura de todas as 4 bordas.</p></li>\n<li><p><strong>import</strong>    - Folha de estilo a importar.</p></li>\n<li><p><strong>font-family</strong> -    Tipo de fonte.</p></li>\n<li><p><strong>font-size</strong> - Tamanho da fonte.</p></li>\n<li><p><strong>height</strong> - Altura exibida ao elemento.</p></li>\n<li><p><strong>width</strong> -    Largura do elemento.</p></li>\n<li><p><strong>margin</strong> - Tamanho de todas as 4 margens.</p></li>\n<li><p><strong>margin-left</strong> -    Tamanho da margem esquerda.</p></li>\n<li><p><strong>margin-right</strong> - Tamanho da margem direita.</p></li>\n<li><p> <strong>margin-bottom</strong>- Tamanho da margem inferior.</p></li>\n<li><p><strong>margin-top</strong> -    Tamanho da margem superior.</p></li>\n<li><p><strong>padding</strong> - Espaço em torno de um elemento em todos os lados.</p></li>\n<li><p><strong>padding-bottom</strong> - Espaço a partir da margem inferior de um elemento.</p></li>\n<li><p><strong>padding-lef</strong> - Espaço à esquerda do elemento.</p></li>\n<li><p><strong>padding-right</strong> - Espaço à direita do elemento.</p></li>\n<li><p><strong>padding-top</strong> - Espaço a partir da margem superior do elemento.</p></li>\n<li><p><strong>text-align</strong> - Alinhamento do texto.</p></li>\n</ul>\n<br/>\n<p>Confira mais alguns exemplos de propriedades nestes sites</p>\n<p><a href=\"https://madsonlimasouza.wordpress.com/2012/01/09/lista-de-tags-e-atributos-css/\">Primeiro site</a></p>\n  <p><a href=\"https://tympanus.net/codrops/css_reference/\">Segundo site</a></p>"
    }
  ],
  "js": [
    {
      "page": "js",
      "title": "O BÁSICO DO JAVASCRIPT",
      "img": "https://cdn.discordapp.com/attachments/880921564630114364/914538065404493844/Basico.png",
      "subtitle": "Como validar formulários utilizando JavaScript.",
      "article": "<p>\n        JavaScript é a linguagem de programação usada para adicionar interatividade ao seu site (por exemplo: jogos, respostas quando botões são pressionados ou dados são inseridos em formulários, animações, entre outros). Esse artigo ajuda a entender essa linguagem interessante e dá uma ideia do que é possível.\n    </p>\n<br>\n    <h2>O que é Javascript?</h2>\n<br>\n    <p>JavaScript (abreviado como \"JS\") é uma linguagem de programação dinâmica cheia de recursos que quando aplicada em um documento HTML, pode fornecer interatividade dinâmica em sites.</p>\n    <p> JavaScript é incrivelmente versátil e amigável ao iniciante. Com a mais experiência, você poderá criar jogos, gráficos 2D e 3D animados, aplicativos abrangentes baseados em bancos de dados e muito mais. </p>\n    <p> JavaScript em si é bastante compacto, mas muito flexível. Os desenvolvedores escreveram uma grande variedade de ferramentas sobre a linguagem JavaScript principal, desbloqueando uma grande quantidade de funcionalidades extras com o mínimo de esforço. Incluindo: </p>\n    <br>\n    <ul>\n        <li>Interfaces de programação de aplicativos no navegador (APIs) - APIs integradas em navegadores da Web, fornecendo funcionalidade como criar dinamicamente HTML e definir estilos CSS, coletar e manipular um fluxo de vídeo da webcam do usuário ou gerando gráficos 3D e amostras de áudio.</li>\n        <br>\n        <li>APIs de terceiros — Permitem que os desenvolvedores incorporem funcionalidades em seus sites de outros provedores de conteúdo, como o Twitter ou o Facebook.</li>\n        <br>\n        <li>Estruturas e bibliotecas de terceiros — você pode aplicá-las ao seu HTML para permitir que você crie rapidamente sites e aplicativos.</li>\n    </ul>\n<br>\n    <p> Abaixo, será apresentado alguns aspectos de linguagem principal, e você também poderá brincar com alguns recursos da API do navegador. </p>\n<br>\n    <h2>Um exemplo \"Olá mundo\"</h2>\n    <br>\n    <ol>\n        <li>Primeiro, vá para o seu site de teste e crie uma nova pasta chamada <code>scripts</code>. Em seguida, dentro da nova pasta de scripts que você acabou de criar, crie um novo arquivo chamado <code>main.js</code>. Salve na sua pasta de <code>scripts</code>.</li>\n        <li>Em seguida, no seu arquivo <code>index.html</code>, insira o seguinte elemento em uma nova linha logo antes da tag de fechamento<code>&lt;/body&gt;</code>:\n         <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scripts/main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n        </li>\n        <li>Isso é basicamente a mesma coisa que o elemento link para o CSS — ele aplica o JavaScript à página, para que ele tenha efeito no HTML (junto com o CSS e qualquer outra coisa na página).</li>\n        <li>Agora adicione o seguinte código no arquivo <code>main.js</code>:\n         <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">const</span> meuCabecalho <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       meuCabecalho<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Ola mundo!'</span><span class=\"token punctuation\">;</span></code></pre></div>\n        </li>\n        <li>Por fim, verifique se os arquivos HTML e Javascript estão salvos e, em seguida, carregue o <code>index.html</code> no navegador. Você deve ver algo do tipo:<img alt=\"\" src=\"https://mdn.mozillademos.org/files/9543/hello-world.png\" style=\"display: block; margin: 0px auto;\" loading=\"lazy\"></li>\n       </ol>\n<br>\n    <h2>O que aconteceu?</h2>\n<br>\n    <p>Seu texto de título foi alterado para \"Hello world!\" usando JavaScript. Você fez isso primeiro usando uma função chamada querySelector() para obter uma referência ao título e armazená-lo em uma variável chamada meuCabecalho. Isso é muito parecido ao que fizemos usando seletores CSS. Quando queremos fazer algo em um elemento, primeiro você precisa selecioná-lo.</p>\n    <p>Depois disso, você define o valor da propriedade textContent para \"Hello world!\", na variável meuCabecalho (que representa o conteúdo do título).</p>\n<br>\n    <h2>Variáveis</h2>\n<br>\n    <p> Variáveis são espaços na memória do computador onde você pode armazenar dados. Você começa declarando uma variável com a palavra-chave var (menos recomendado, se aprofunde mais para uma explicação) ou a palavra chave let, seguida por qualquer nome que você queira chamá-la:</p>\n    <br>\n    <ol>   \n        <li>let minhaVariavel;</li>\n    </ol>\n<br>\n    <h4>Nota: Ponto-e-vírgula no fim de uma linha indica onde uma instrução termina; só é absolutamente necessário quando você precisa separar intruções em uma única linha. No entanto, algumas pessoas acreditam que é uma boa prática colocá-las no final de cada instrução.</h4>\n    <p>Depois de declarar uma variável, você pode dar a ela um valor:</p>\n<br>\n    <ul>\n        <li>minhaVariavel = 'Cleber'; </li>\n    </ul>\n<br>\n    <p>Você pode fazer as duas operações na mesma linha se você quiser:</p>\n<br>\n    <ul>\n        <li> let minhaVariavel = 'Cleber'; </li>\n    </ul>\n<br>\n    <p>Você pode retornar o valor chamando a variável pelo nome:</p>\n<br>\n    <ul>\n        <li> minhaVariavel; </li>\n    </ul>\n<br>\n    <p>Depois de dar à variável um valor, você pode mudá-lo:</p>\n<br>\n    <ul>\n        <li>let minhaVariavel = 'Cleber'; <br>\n        minhaVariavel = 'Stevan'</li>\n    </ul>\n<br>\n    <p> Note que as variáveis podem conter valores com diferentes tipos de dados:</p>\n<br>\n    <table class=\"standard-table\">\n        <thead>\n         <tr>\n          <th scope=\"row\">Variável</th>\n          <th scope=\"col\">Explicação</th>\n          <th scope=\"col\">Exemplo</th>\n         </tr>\n        </thead>\n        <tbody>\n         <tr>\n          <th scope=\"row\"><a>String</a></th>\n          <td>Uma sequência de texto é conhecida como uma string. Para mostrar que o valor é uma string, você deve envolvê-la em aspas.</td>\n          <td><code>let minhaVariavel = 'Bob';</code></td>\n         </tr>\n         <tr>\n          <th scope=\"row\"><a>Number</a></th>\n          <td>Um número. Números não tem aspas ao redor deles.</td>\n          <td><code>let minhaVariavel = 10;</code></td>\n         </tr>\n         <tr>\n          <th scope=\"row\"><a>Boolean</a></th>\n          <td>\n           <p>Um valor verdadeiro ou falso. As palavras <code>true</code> e <code>false</code> são palavras-chaves especiais em JS e não precisam de aspas.</p>\n          </td>\n          <td><code>let minhaVariavel = true;</code></td>\n         </tr>\n         <tr>\n          <th scope=\"row\"><a>Array</a></th>\n          <td>Uma estrutura que permite armazenar vários valores em uma única variável.</td>\n          <td><code>let minhaVariavel = [1,'Bob','Steve',10];</code><br>\n           Acesse cada item do array dessa maneira: <code>minhaVariavel[0]</code>, <code>minhaVariavel[1]</code>, etc.</td>\n         </tr>\n         <tr>\n          <th scope=\"row\"><a>Object</a></th>\n          <td>Basicamente, qualquer coisa. Tudo em JavaScript é um objeto e pode ser armazenado em uma variável. Tenha isso em mente enquanto aprende.</td>\n          <td><code>let minhaVariavel = document.querySelector('h1');</code><br>\n           Todos os exemplos acima também.</td>\n         </tr>\n        </tbody>\n       </table>\n<br>\n       <h2>Comentários</h2>\n       <p>Os comentários são, essencialmente, pequenos trechos de texto que podem ser adicionados entre os códigos e são ignorados pelo navegador. Você pode colocar comentários no código JavaScript, assim como em css:</p>\n       <pre class=\"brush: js notranslate\"><code><span class=\"token comment\">\n        /*\n        Tudo no meio é um comentário.\n        */\n    </span></code></pre>\n<br>\n    <p>Se o seu comentário n~~ao tiver quebras de linha, é mais facil para colocá-lo depois de duas barras como esta:</p>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token comment\">\n        // Isto é um comentário.\n    </span></code></pre>\n    <br>\n    <h2>Operadores</h2>\n    <p>Um operador é um símbolo matemático que produz um resultado baseado em dois valores (ou variáveis). Na tabela a seguir, você pode ver alguns dos operadores mais simples, além de alguns exemplos para experimentar no console JavaScript.</p>\n<br>\n    <table class=\"standard-table\">\n        <thead>\n         <tr>\n          <th scope=\"row\">Operador</th>\n          <th scope=\"col\">Explicação</th>\n          <th scope=\"col\">Simbolo(s)</th>\n          <th scope=\"col\">Exemplo</th>\n         </tr>\n        </thead>\n        <tbody>\n         <tr>\n          <th scope=\"row\">Adição</th>\n          <td>Usado para somar dois números ou juntar duas strings.</td>\n          <td><code>+</code></td>\n          <td><code>6 + 9;<br>\n           \"Ola \" + \"mundo!\";</code></td>\n         </tr>\n         <tr>\n          <th scope=\"row\">Subtração, multiplição, divisão</th>\n          <td>Fazem exatamente o que você espera que eles façam na matemática básica.</td>\n          <td><code>-</code>, <code>*</code>, <code>/</code></td>\n          <td><code>9 - 3;<br>\n           8 * 2; // no JS a multiplicação é um asterisco<br>\n           9 / 3;</code></td>\n         </tr>\n         <tr>\n          <th scope=\"row\">Atribuição</th>\n          <td>Você já viu essa, ela associa um valor a uma variável.</td>\n          <td><code>=</code></td>\n          <td><code>let minhaVariavel = 'Bob';</code></td>\n         </tr>\n         <tr>\n          <th scope=\"row\">\n           <p>Operador de igualdade</p>\n          </th>\n          <td>Faz um teste para ver se dois valores são iguais, retornando um resultado <code>true</code>/<code>false</code> (booleano).</td>\n          <td><code>===</code></td>\n          <td><code>let minhaVAriavel = 3;<br>\n           minhaVariavel === 4;</code></td>\n         </tr>\n         <tr>\n          <th scope=\"row\">Negação, não igual</th>\n          <td>Retorna o valor lógico oposto do sinal; transforma um true em um false, etc. Quando usado junto com o operador de igualdade, o operador de negação testa se os valores são diferentes.</td>\n          <td><code>!</code>, <code>!==</code></td>\n          <td>\n           <p>Para \"Negação\", a expressão básica é <code>true</code>, mas a comparação retorna <code>false</code> porque a negamos:</p>\n       <br>\n           <p><code>let minhaVariavel = 3;<br>\n            !(minhaVariavel === 3);</code></p>\n       \n           <p>\"Não igual\" dá basicamente o mesmo resultado com sintaxe diferente. Aqui estamos testando \"é <code>minhaVariavel</code> NÃO é igual a 3\". Isso retorna <code>false</code> porque <code>minhaVariavel</code> É igual a 3.</p>\n       <br>\n           <p><code><code>let minhaVariavel = 3;</code><br>\n            minhaVariavel !== 3;</code></p>\n          </td>\n         </tr>\n        </tbody>\n       </table>\n<br>\n    <h2>Condicionais</h2>\n    <p>Condicionais são estruturas de código que te permitem testar se uma expressão retorna verdadeiro ou não, executando um código alternativo revelado por seu resultado. Uma forma muito comum de condicional é a instrução <code>if ... else</code>. Por exemplo:</p>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        let</span> sorvete <span class=\"token operator\">=</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sorvete <span class=\"token operator\">===</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Opa, Eu amo sorvete de chocolate!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ahh, mas chocolate é o meu favorito...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code>\n    </pre>\n  <br>\n    <p> A expressão dentro do <code>if ( ... )</code> é o teste — ela usa o operador de igualdade (como descrito anteriormente) para comparar a variável <code>sorvete</code> com a string <code>chocolate</code> para ver se elas são iguais. Se essa comparação retorna <code>true</code>, o primeiro bloco de código será executado. Se a comparação não for verdadeira, o primeiro bloco de código será ignorado e o segundo bloco de código, após a instrução <code>else</code>, será executado. </p>\n    <br>\n    <h2>Funções</h2>\n    <p>Funções são uma maneira de encapsular funcionalidades que você deseja reutilizar. Quando você precisa de um procedimento, você pode chamar a função com um nome, em vez de reescrever o código inteiro a cada vez. Você já viu alguns usos de funções acima, por exemplo:</p>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        let</span> minhaVariavel <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token function\">\n        alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ola!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <p>Essas funções, <code>document.querySelector</code> e <code>alert</code> são pré-definidas nos navegadores para você usar quando quiser.</p>\n    <p>Se você ver algo que parece com um nome de variável, mas com parênteses — () — depois, provavelmente é uma função. Funções geralmente tem Argumentos — pedaços de dados que elas precisam para realizarem o seu trabalho. Os argumentos são colocados dentro dos parênteses e separados por vírgulas, se houver mais de um.</p>\n    <p>Por exemplo, a função <code>alert()</code> faz com que uma caixa pop-up apareça dentro da janela do navegador, mas precisamos passar uma string como argumento para dizer à função o que escrever na caixa pop-up.</p>\n    <p>A boa noticia é que você pode definir suas próprias funções — no próximo exemplo está presente uma função simples que recebe dois números como argumentos e os multiplica:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        function</span> <span class=\"token function\">multiplica</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span>num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> resultado <span class=\"token operator\">=</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resultado<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Tente executar a função acima no console e teste com vários argumentos. Por exemplo:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token function\">\n        multiplica</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">multiplica</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">multiplica</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <h4>Nota: A intrução <u>return</u> diz ao navegador para retornar a variável <code>resultado</code> da função para que ela esteja disponível para uso. Isso é necessário porque as variáveis definidas dentro das funções só estão disponíveis dentro destas funções. Isso é chamado <u>Escopo</u> de variável. </h4>\n<br>\n    <h2>Eventos</h2>\n    <p>Interatividade real em um site precisa de eventos. Estas são estruturas de código que percebem as coisas que acontecem no navegador, executando o código em resposta. O exemplo mais óbvio é o <u>evento de clique</u>, que é disparado pelo navegador quando você clica em algo com o mouse. Para demonstrar isso, insira o seguinte código no seu console e, em seguida, clique na página da Web atual:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ai! Pare de me cutucar!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Há muitas maneiras de associar um evento a um elemento. Aqui selecionamos o elemento <a><code><u>&lt;html&gt;</u></code></a>, definindo sua propriedade <code><a><u>onclick</u></a></code> igual a uma função anônima (ou seja, sem nome), que contém o código que queremos que o evento clique execute.</p>\n    <p>Observamos que:</p>\n    <pre class=\"brush: js notranslate\"><code>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <p>é equivalente a</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        let</span> meuHTML <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        meuHTML<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <p>É só uma maneira mais curta de escrever.</p>\n<br>\n    <h2>Melhorando nosso site de exxemplo</h2>\n    <p>Agora que analisamos alguns fundamentos do JavaScript, vamos adicionar alguns recursos interessantes ao nosso site de exemplo para ver o que é possível fazer.</p>\n<br>\n    <h3>Adicionando um modificador de imagem</h3>\n<br>\n    <p>Nessa parte, nós adicionaremos outra imagem no nosso site, e vamos usar o JavaScript para alternar entre as duas, quando a imagem for clicada</p>\n<br>\n    <ol>\n        <li>Antes de tudo, ache outra imagem que você gostaria que aparecesse no seu site. Tenha certeza que ela tem o mesmo tamanho que sua primeira imagem, ou o mais perto disso possível.</li>\n        <li>Salve a imagem na pasta <code>imagens</code>.</li>\n        <li>Renomeie a imagem para 'logo2.png' (sem as aspas).</li>\n        <li>Vá no seu arquivo <code>main.js</code>, e digite o seguinte código JavaScript(se seu \"Ola mundo\" em JavaScript ainda estiver lá, delete-o):</li>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        let</span> minhaImagem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<br>\n        minhaImagem<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> meuSrc <span class=\"token operator\">=</span> minhaImagem<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>meuSrc <span class=\"token operator\">===</span> <span class=\"token string\">'imagens/firefox-icon.png'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              minhaImagem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'imagens/logo2.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              minhaImagem<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'imagens/firefox-icon.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n        <li>Salve todos os arquivos e carregue o <code>index.html</code> no navegador. Agora quando você clicar na imagem, ela vai mudar para a outra.</li>\n    </ol>\n<br>\n    <p>Você armazena uma referência ao seu elemento <a><code>&lt;img&gt;</code></a> na variável <code>minhaImagem</code>. Depois, você faz a propriedade do manipulador de evento <code>onclick</code> dessa variável igual a uma função sem nome (uma função \"anônima\"). Agora, toda vez que esse elemento de imagem é clicado:</p>\n<br>\n    <ol>\n        <li>Você recupera o valor do atributo&nbsp;<code>src</code> da imagem.</li>\n        <li>Você usa uma condicional para checar se o valor&nbsp;<code>src</code>&nbsp;é igual ao caminho da imagem original:\n         <ol>\n          <li>Se for, você muda o valor de <code>src</code>&nbsp;para o caminho da segunda imagem, forçando a outra imagem a ser carregada dentro do elemento&nbsp;<a><code>&lt;img&gt;</code></a>.</li>\n          <li>Se não é (significando que já mudou), nós mudamos o valor&nbsp;<code>src</code>&nbsp;de volta ao caminho da imagem, para o estado original.</li>\n         </ol>\n        </li>\n    </ol>\n<br>\n    <h3>Adicionando uma mensagem personalizada de boas vindas</h3>\n<br>\n    <p>Em seguida, adicionaremos outro trecho de código, alterando o título da página para uma mensagem personalizada de boas vindas quando o usuário realizar sua primeira visita ao site. Essa mensagem de boas vindas persistirá, quando o usuário deixar o site e voltar mais tarde — salvaremos a mensagem usando a API de Armazenamento Web. Incluiremos também uma opção para mudar o usuário e, portanto, a mensagem de boas vindas sempre que necessário.</p>\n    <ol>\n    <li>Em <code>index.html</code>, adicione a seguinte linha de código antes do elemento <a><code>&lt;script&gt;</code></a>:\n<br>\n     <div class=\"code-example\"><pre class=\"brush: html notranslate\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Mudar usuário<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></code></pre></div>\n    </li>\n    <li>Em <code>main.js</code>, adicione o seguinte código no fim do arquivo, exatamente como está escrito — isso pega referências para o novo botão que adicionamos e para o título, e guarda ambos em variáveis:\n     <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">let</span> meuBotao <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> meuCabecalho <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n     </li>\n     <li>Agora adicione a seguinte função para criar a saudação personalizada&nbsp;— isso não vai fazer nada ainda, mas corrigiremos isso em um momento:\n     <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">defineNomeUsuario</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> meuNome <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Por favor, digite seu nome.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nome'</span><span class=\"token punctuation\">,</span> meuNome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     meuCabecalho<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Mozilla é legal, '</span> <span class=\"token operator\">+</span> meuNome<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>  \n    Essa função contem uma função <a><code>prompt()</code></a>, que traz uma caixa de diálogo assim como <code>alert()</code> faz. Este <code>prompt()</code>, no entanto, pede ao usuário para inserir algum dado e guarda os dados em uma variável quando o botão <strong>OK</strong> é pressionado. Nesse caso, estamos pedindo ao usuário para digitar seu nome. Em seguida, chamamos uma API denominada <code>localStorage</code>, o que nos permite guardar dados no navegador para usarmos mais tarde. Usamos a função <code>setItem()</code> de localStorage para criar e guardar um item de dado chamado <code>'nome'</code>, definindo seu valor para a variável <code>meuNome</code> que contém o nome que o usuário digitou. Finalmente, definimos o <code>textContent</code> do título como uma string, mais o nome recém-armazenado do usuário.</li>\n <br>\n    <li>Em seguida, adicione esse bloco <code>if ... else</code> — poderíamos chamar isso de código de inicialização, pois ele estrutura o aplicativo quando é carregado pela primeira vez:\n     <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">defineNomeUsuario</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">let</span> nomeGuardado <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     meuCabecalho<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Mozilla é legal, '</span> <span class=\"token operator\">+</span> nomeGuardado<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n      Primeiro, esse bloco usa o operador de negação (NÃO lógico representado pelo <code>!</code>) para checar se o dado <code>nome</code>&nbsp;existe&nbsp;— se não existir, a função <code>defineNomeUsuario()</code> é executada para criá-lo. Se ele já existir (isto é, se o usuário já tiver digitado quando visitou o site anteriormente), nós recuperamos o nome guardado usando&nbsp;<code>getItem()</code> e associamos o <code>textContent</code> do título a uma string, mais o nome do usuário, como fizemos dentro de <code>defineNomeUsuario()</code>.</li>\n     <li>Finalmente, coloque o evento <code>onclick</code>&nbsp;no botão, para que quando clicado, ele execute a função <code>defineNomeUsuario()</code>. Isso permite que o usuário defina&nbsp;um novo nome sempre que quiser ao pressionar o botão:\n      <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>meuBotao<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">defineNomeUsuario</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    </code></pre></div>\n     </li>\n    </ol>\n    <p>Agora quando você visitar seu site pela primeira vez, ele solicitará seu nome de usuário e, em seguida, enviará uma mensagem personalizada. Você pode alterar o nome a qualquer momento, pressionando o botão. Como um bônus, porque o nome é armazenado dentro de <code>localStorage</code> , ele persiste depois que o site é fechado, mantendo a mensagem personalizada lá quando você abrir o site novamente.</p>\n<br>\n    <h3>Um nome de usuário nulo?</h3>\n<br>\n    <p>Quando você executa o exemplo e obtém a caixa de diálogo que solicita a inserção do seu nome de usuário, tente pressionar o botão Cancelar. Você deve terminar com um título que diz \"Mozilla is cool, <a>null</a>\". Isso ocorre porque, quando você cancela o prompt, o valor é definido como null, um valor especial em JavaScript que se refere basicamente à ausência de um valor.</p>\n    <br>\n    <p>Tente também pressionar OK sem digitar nenhum nome - você deve terminar com um título que diz \"Mozilla é legal,\", por razões bastante óbvias.</p>\n<br>\n    <p>Se você quiser evitar esses problemas, verifique se o usuário não inseriu um nome <code>null</code> ou em branco, atualizando a função <code>defineNomeUsuario()</code> para isso:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        function</span> <span class=\"token function\">defineNomeUsuario</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> meuNome <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Por favor, digite seu nome.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>meuNome <span class=\"token operator\">||</span> meuNome <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">defineNomeUsuario</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nome'</span><span class=\"token punctuation\">,</span> meuNome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          meuCabecalho<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Mozilla é legal, '</span> <span class=\"token operator\">+</span> meuNome<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Na linguagem humana - se <code>meuNome</code> não tiver valor ou seu valor for <code>null</code>, execute <code>defineNomeUsuario()</code> novamente desde o início. Se ele tiver um valor (se as instruções acima não forem verdadeiras), armazene o valor em localStorage e defina-o como o texto do cabeçalho.</p>\n<br>\n    <h2>Conclusão</h2>\n<br>\n    <p>Se você seguiu todas as instruções desse artigo, você deve terminar cm uma pagina parecida com essa:</p>\n    <img alt=\"\" src=\"https://mdn.mozillademos.org/files/9539/website-screen-scripted.png\" style=\"display: block; margin: 0px auto;\" loading=\"lazy\">"
    },
    {
      "page": "js",
      "title": "STRINGS EM JS",
      "img": "https://cdn.discordapp.com/attachments/880921564630114364/914538064993480704/JavaScript_Strings.png",
      "subtitle": "Trabalhando com texto (Strings) em JavaScript",
      "article": "<p>Agora Vamos dar atenção às strings, isto é como é chamado em programação qualquer parte de texto. <br>\n    Neste artigo nós veremos tudo que você realmente deve saber sobre strings quando está aprendendo JavaScript. Como criar, fazer citações e como juntar strings.</p>\n<br>\n    <h2>O poder das palavras</h2>\n<br>\n    <p>Palavras são muito importante para humanos, elas são uma grande parte de como nos comunicamos. <br>\n    Desde que a Web é largamente baseada em texto, projetada para permitir humanos a comunicar e compartilhar informação, isto é útil para nós termos controle sobre como apresentar isso. <u>HTML</u> fornece estrutura e significado para nosso texto, <u>CSS</u> nos permite estilizar precisamente ele, e JavaScript contém um número de funcionalidades para manipular strings, criar mensagens de boas-vindas customizadas, mostrando rótulos quando preciso, sorteando termos de acordo como desejado e muito mais. </p>\n<br>\n    <p>Muitos dos programas estão envolvendo alguma parte com manipulação de string.</p>\n<br>\n    <h2>Strings: O básico</h2>\n<br>\n    <p>Em um primeiro relance, strings são tratadas de forma parecida como números, mas quando vamos mais a fundo, você começa a ver algumas diferenças importantes. Vamos começar a entrar em linhas básicas no console para nos familiarizar.</p>\n<br>\n    <h3> Criando uma string </h3>\n<br>\n    <ol>\n        <li>Para começar, digite as linhas seguintes:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'The revolution will not be televised.'</span><span class=\"token punctuation\">;</span>\n            string<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n         Como fizemos com números, nós declaramos uma variável, inicializando-a com um valor string, e então retornamos o valor. A única diferença aqui é que quando escrevemos uma string, você precisa colocá-la entre aspas.\n        </li>\n        <br>\n        <li>Se você não fez isso, ou esqueceu uma das aspas, você recebeu um erro. Experimente digitar as linhas seguintes:\n         <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>\n            <span class=\"token keyword\">var</span> badString <span class=\"token operator\">=</span> This is a test<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> badString <span class=\"token operator\">=</span> 'This is a test<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> badString <span class=\"token operator\">=</span> This is a test'<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n         Estas linhas não funcionam porque todo texto sem aspas são interpretados como um nome de variável, propriedade do nome, palavra reservada ou algo assim. Se o navegador não puder encontrar, então um é erro é apresentado (ex.: \"faltando; declaração anterior\"). Se o navegador puder ver onde a string começa, mas não conseguir encontrar o fim, como indicado com as segundas aspas, é retornado um erro (com \"string não terminada\"). Se seu programa retorna tais erros, então volte e verifique todas suas strings para ter certeza que não faltam aspas.\n        </li>\n<br>\n        <li>O seguinte funcionará se você definiu previamente a variável <code>string</code> - tente isto agora:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> badString <span class=\"token operator\">=</span> string<span class=\"token punctuation\">;</span>\n            badString<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        <code>badString</code> é agora definido para ter o mesmo valor de <code>string</code>.\n        </li>\n    </ol>\n<br>\n    <h3>Aspas simples x aspas duplas</h3>\n<br>\n    <ol>\n        <li>Em JavaScript, você pode escolher aspas simples ou duplas para envolver suas strings. Ambas linhas abaixo funcionará bem:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> sgl <span class=\"token operator\">=</span> <span class=\"token string\">'Single quotes.'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> dbl <span class=\"token operator\">=</span> <span class=\"token string\">\"Double quotes\"</span><span class=\"token punctuation\">;</span>\n            sgl<span class=\"token punctuation\">;</span>\n            dbl<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        </li>\n<br>\n        <li>Há poucas diferenças entre as duas, e qual você usar é de preferência pessoal. Você deve escolher uma e permanecer nela, entretanto; diferentes aspas no código pode ser confuso, especialmente se você usa diferentes aspas na mesma string! O seguinte retornará erro:\n        <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>\n            <span class=\"token keyword\">var</span> badQuotes <span class=\"token operator\">=</span> 'What on earth<span class=\"token operator\">?</span>\"<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        </li>\n<br>\n        <li>O navegador interpretará como a string não tivesse fechada, porque o outro tipo de aspas pode aparecer dentro da sua string. Por exemplo, ambos exemplos abaixo são okay:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> sglDbl <span class=\"token operator\">=</span> <span class=\"token string\">'Would you eat a \"fish supper\"?'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> dblSgl <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm feeling blue.\"</span><span class=\"token punctuation\">;</span>\n            sglDbl<span class=\"token punctuation\">;</span>\n            dblSgl<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        </li>\n<br>\n        <li>Entretanto, você não pode incluir o mesmo tipo de aspas dentro da sua string, se você usa para conter seu texto. O seguinte será um erro, como é confuso para o navegador onde a string termina:\n        <div class=\"code-example\"><pre class=\"brush: js example-bad notranslate\"><code>\n            <span class=\"token keyword\">var</span> bigmouth <span class=\"token operator\">=</span> <span class=\"token string\">'I'</span>ve got no right to take my place<span class=\"token operator\">...</span>'<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n         Isto nos leva muito bem ao nosso próximo assunto.\n        </li>\n    </ol>\n<br>\n    <h3>Caracteres de escape na string</h3>\n<br>\n    <p>Para corrigir o problema anterior, nós precisamos tirar o problema da aspa. Caracteres de escape significa que nós fazemos algo para ter certeza que eles são reconhecidos como texto, não parte do código. Em JavaScript, nós fazemos isso colocando uma barra invertida logo antes do caracter.Tente isso:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code>\n        <span class=\"token keyword\">var</span> bigmouth <span class=\"token operator\">=</span> <span class=\"token string\">'I\\'ve got no right to take my place...'</span><span class=\"token punctuation\">;</span>\n        bigmouth<span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <p>Isto funciona bem. Você pode permitir outros caracteres do mesmo jeito, ex.: <code>\\\"</code>, e há alguns códigos especiais também. </p>\n<br>\n    <h2>Concatenando strings</h2>\n<br>\n    <ol>\n        <li>Concatenar é uma palavra chique da programação que significa \"colocar junto\". Para colocar strings juntas em JavaScript, usamos o operador (+), o mesmo usamos para adicionar números, mas neste contexto é algo diferente. Vamos tentar este exemplo no console.\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> one <span class=\"token operator\">=</span> <span class=\"token string\">'Hello, '</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> two <span class=\"token operator\">=</span> <span class=\"token string\">'how are you?'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> joined <span class=\"token operator\">=</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n            joined<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n         O resultado disso é uma variável chamada <code>joined</code>, que contém o valor \"Hello, how are you?\".\n        </li>\n<br>\n        <li>No último exemplo, nós somente juntamos duas strings, mas você pode fazer quantas quiser, contanto que inclua um <code>+</code> entre cada uma.Experimente isso:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> multiple <span class=\"token operator\">=</span> one <span class=\"token operator\">+</span> one <span class=\"token operator\">+</span> one <span class=\"token operator\">+</span> one <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n            multiple<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        </li>\n<br>\n        <li>Você pore usar um mix de variáveis e strings reais. Tente isso:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> response <span class=\"token operator\">=</span> one <span class=\"token operator\">+</span> <span class=\"token string\">'I am fine — '</span> <span class=\"token operator\">+</span> two<span class=\"token punctuation\">;</span>\n            response<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        </li>\n    </ol>\n<br>\n    <h4>Nota: Quando você coloca uma string atual no seu código dentro de aspas simples ou dupla, é chamada uma <b>string literal</b>.</h4>\n<br>\n    <h4>Concatenação em contexto</h4>\n<br>\n    <p>Vamos dar uma olhada na concatenação em ação, aqui está um exemplo:</p>\n<br>\n    <pre class=\"brush: html notranslate\"><code>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">&gt;</span></span>Pressione-me<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    </code></pre>\n<br>\n    <pre class=\"brush: js notranslate\"><code>\n        <span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<br>\n        button<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> nome <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Qual é o seu nome?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá '</span> <span class=\"token operator\">+</span> nome <span class=\"token operator\">+</span> <span class=\"token string\">', prazer em conhecê-lo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Aqui estamos usando uma função <code><u>Window.prompt()</u></code> na linha 4, a qual pergunta ao usuário para responder uma questão via uma caixa de diálogo, então armazena o texto em uma variável, neste caso nome. Nós então usamos uma função <code><u>Window.alert()</u></code> na linha 5 para mostrar outra caixa de diálogo contendo nossa string montada de duas strings literais e a variável name,via concatenação.</p>\n<br>\n    <h3>Números x strings</h3>\n<br>\n    <ol>\n        <li>Então o que acontece quando tentamos adicionar (ou concatenar) uma string e um número? Vamos tentar isso no console:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token string\">'Front '</span> <span class=\"token operator\">+</span> <span class=\"token number\">242</span><span class=\"token punctuation\">;</span>\n       </code></pre></div>\n         Você pode esperar um erro disto, mas funciona correto. Tentando representar&nbsp; uma string como um número, realmente não faz sentido. Mas representando um número como string, faz. Então o navegador espertamente converte o número em string e concatena as duas.\n        </li>\n<br>\n        <li>Você pode fazer isto até com dois números — você pode forçar um número a ser string colocando ele entre aspas. Experimente o seguinte (nós estamos usando o operador <code>typeof</code> para checar o que a variável é, se um número ou string):\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> myDate <span class=\"token operator\">=</span> <span class=\"token string\">'19'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'67'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">typeof</span> myDate<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        </li>\n<br>\n        <li>Se você tem uma variável numérica que precisa converter em string, mas não mudar completamente, ou uma string e quer converter em número, você pode usar a construção seguinte:\n         <ul>\n        <li>O objeto <a><code>Number</code></a> converterá qualquer coisa passada em um número, se for possível. Tente o seguinte:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> myNum <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">typeof</span> myNum<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        </li>\n<br>\n        <li>Por outro lado, todo número tem um método chamado <code><a>toString()</a></code> que converterá para a string equivalente. Tente isto:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n            <span class=\"token keyword\">var</span> myNum <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> myNum<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">typeof</span> myString<span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        </li>\n<br>\n        </ul>\n        Estas construções podem ser bem úteis em algumas situações. Por exemplo, se o usuário colocar um número em um campo de texto, isso será uma string. Entretanto, se você quiser adicionar este número a algo, você precisa que seja um número, então você pode passar isto através do <code>Number()</code> para poder manipular.\n        </li>\n    </ol>\n<br>\n    <h2>Conclusão</h2>\n<br>\n    <p>Então isto é o básico sobre strings em JavaScript. Pesquisando sobre alguns outros métodos de construção de strings em JavaScript, irá aprender a manipular a string da forma que quiser.</p>"
    },
    {
      "page": "js",
      "title": "OPERADORES DE JAVASCRIPT NA PRÁTICA",
      "img": "https://cdn.discordapp.com/attachments/903657891091861564/913483719627665448/Sem_titulo.png",
      "subtitle": "Conhecendo e entendendo como usar os operadores JS na Construção de códigos.",
      "article": "<p>Atualmente existem nove operadores: de atribuição, comparação e igualdade, desigualdade, destructuring, aritméticos, relacionais, lógicos, unários e ternários.</p>\n<br>\n    <h2>Atribuição</h2>\n    <p>Representado pelo símbolo (=), serve para atribuir ao operando do lado esquerdo, um determinado valor definido pelo operando do lado direito. Por exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        let a = \"a\"\n        console.log(a)\n        <br>\n        let numero1 = 1\n        console.log(numero1)\n        <br>\n        let arr = []\n        console.log(arr)\n        <br>\n        let obj = {}\n        console.log(obj)\n        <br>\n        let func = function(){\n            return \"Funciona também com funções\"\n        }\n        console.log(func())```jsx\n        let a = \"a\"\n        console.log(a)\n        <br>\n        let numero1 = 1\n        console.log(numero1)\n        <br>\n        let arr = []\n        console.log(arr)\n        <br>\n        let obj = {}\n        console.log(obj)\n        <br>\n        let func = function(){\n            return \"Funciona também com funções\"\n        }\n        console.log(func())\n    </code></pre>\n<br>\n    <h2>Comparação e Igualdade</h2>\n    <p>Existem dois tipos de comparação e elas são: Abstrata, representada por (==) e a Estrita, representada por (===).</p>\n    <p>Muitas vezes, os operadores de comparação e igualdade são confundidos com o operador de atribuição, pois o símbolo utilizado é o de igual (=), mas são bem diferentes.</p>\n<br>\n    <h2>Comparação abstrata</h2>\n    <p>Essa comparação converte o tipo antes de comparar. Já que o JavaScript não é fortemente tipado, é o valor que será comparado. Exemplos:</p>\n        <pre class=\"wp-block-code\"><code>\n            console.log(1 == '1') //imprime true\n            console.log(0 == null) //imprime false\n            console.log(null == undefined) //imprime true\n        </code></pre>\n            \n    <br>\n    <p>Se tratando de objetos, o JavaScript vai comparar endereços de memória, que serão os mesmo quando se trata do mesmo objeto. Comparações entre dois objetos diferentes geram resultados falsos:</p>\n    <pre class=\"wp-block-code\"><code>\n        let objeto1 = {'chave': 'valor'}\n        let objeto2 = {'chave': 'valor'}\n        console.log(objeto1 == objeto2) //imprime false pois são duas referências de memória diferentes\n    </code></pre>\n    <br>\n    <h2>Comparação Estrita</h2>\n    <p>Também conhecida como <b>identidade</b>, diferente da abstrata, não faz a conversão de tipo antes da comparação. Sendo assim, os operandos só vão retornar <i>true</i>(verdadeiro) caso sejam estritamente iguais. Exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        console.log(1 === '1') //imprime false\n        console.log(null === undefined) //imprime false\n        console.log(0 === null) //imprime false\n    </code></pre>\n<br>\n    <p>A comparação estrita de objetos continua sendo falsa, pelo mesmo motivo da anterior:</p>\n    <pre class=\"wp-block-code\"><code>\n        let objeto1 = {'chave': 'valor'}\n        let objeto2 = {'chave': 'valor'}\n        console.log(objeto1 === objeto2) //imprime false pois são duas referências de memória diferentes\n    </code></pre>\n        <br>\n    <h2>Desigualdade</h2>\n    <p>O operador de desigualdade (!=) retorna <i>true</i>(verdadeiro) se os operandos <b>não forem iguais.</b> No caso de comparar objetos, continua sendo feita a comparação entre os endereços de memória. Exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        console.log(1 != 2) //imprime true\n        console.log(1 != '1') //imprime false\n        console.log(0 != null) //imprime true\n        <br>\n        \n        let objeto1 = {'chave': 'valor'}\n        let objeto2 = {'chave': 'valor'}\n        console.log(objeto1 != objeto2) //imprime true pois de fato são duas referências de memória diferentes\n    </code></pre>\n    <br>\n   <h2>Destructuring</h2>\n   <p>Também pode ser chamado de operador de desestruturação, funcionando da seguinte forma: ele tira partes de um objeto ou array e \"joga\" em outra variável. É por isso que quando você tem o objeto obj:</p>\n   <pre class=\"wp-block-code\"><code>\n       const obj = { nome: 'Júlia', sobrenome: 'da Silva', idade:  27}\n    </code></pre>\n<br>\n    <p>Que tem as propriedades nome, sobrenome e idade, é possível tirar \"partes\" desse objeto, por isso são chamados de propriedades.\n    <br>\n    Por isso que, quando se faz:</p>\n    <pre class=\"wp-block-code\"><code>\n        const {sobrenome} = obj\n    </code></pre>\n<br>\n    <p>Ele retorna o valor da propriedade de mesmo nome, que é \"da Silva\".</p>\n    <p>Ao tentar acessar uma propriedade que não existe, ele retorna <i>undefined</i>(indefinido):</p>\n    <pre class=\"wp-block-code\"><code>\n        const obj = { nome: 'Júlia', sobrenome: 'da Silva', idade:  27}\n<br>\n        const { peso } = obj\n        <br>\n        console.log(peso)//imprime undefined\n    </code></pre>\n<br>\n    <p>Um exemplo usando Arrays seria:</p>\n    <pre class=\"wp-block-code\"><code>\n        const numeros = [1, 2, 3, 4, 5]\n        const[a, b, c, d, e] = numeros\n        console.log(a, b, c, d, e)//imprime 1 2 3 4 5\n    </code></pre>\n<br>\n    <h2>Operadores Aritméticos</h2>\n    <p>São as operações básicas que já conhecemos: adição (+), subtração (-), divisão (/), multiplicação (*), operações de módulo (%) que retornam o resto da divisão.</p>\n    <pre class=\"wp-block-code\"><code>\n        let x, y\n<br>\n        x = 5\n        y = 3\n        <br>\n        console.log(x - y) //imprime 2\n        console.log(x * y) //imprime 15\n        console.log(x / y) //imprime 1.66666(...)67\n        console.log(x % y) //imprime 2\n    </code></pre>\n<br>\n    <p>Temos ainda as operações de <b>exponenciação</b>(**), que eleva o primeiro operando ao segundo operando; de <b>incremento</b>(++), que acrescenta ao operando em uma unidade; e de <b>decremento</b>(–) que reduz o operando em uma unidade.</p>\n    <p>O operador de adição (+) pode tanto fazer a soma dos operandos quanto a <b>concatenação</b> de Strings, então é necessária uma atenção para seu uso.</p>\n    <pre class=\"wp-block-code\"><code>\n        let x, y\n<br>\n        x = 2\n        y = 3\n        <br>\n        console.log(x + y) //imprime 5\n        <br>\n        x = 2\n        y = \"Juntou!\"\n        console.log(x + y) //imprime 2Juntou, a concatenação dos dois operandos\n    </code></pre>\n<br>\n    <p>Além disso, o JavaScript considera o valor booleano <i>true</i> == 1, então ao fazer a soma de <i>true</i> com 1, o resultado é 2:</p>\n    <pre class=\"wp-block-code\"><code>\n        console.log(true + 1) //imprime 2\n    </code></pre>\n<br>\n    <p>Isso acontece porque ele interpreta 1 e 0 como verdadeiro (true) e falso (false), respectivamente.</p>\n    <p>Porém, ao tentar fazer uma soma de String e Boolean, o resultado é uma concatenação:</p>\n    <pre class=\"wp-block-code\"><code>\n        console.log(\"true\" + true) //imprime truetrue\n    </code></pre>\n<br>\n    <h2>Operadores Relacionais</h2>\n    <p>A depender da relação entre dois operadores, os operadores relacionais retornarão <b>verdadeiro</b> (true) ou <b>falso</b> (false). Essas relações podem ser quatro:\n    <br>\n    De maior (>); maior ou igual (>=); menor (<); e menor ou igual (<=). Por exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        console.log(3 &gt; 2) //imprime true\n        console.log(3 &lt; 2) //imprime false\n        console.log(3 &gt;= 2) //imprime true\n        console.log(3 &lt;= 2) //imprime false\n    </code></pre>\n<br>\n    <h2>Operadores Lógicos</h2>\n    <p>Os operadores lógicos são:&& (\"e\" lógico), || (\"ou\" lógico) e o !(negação lógica).</p>\n    <p>Também comumente usados com os valores booleanos, exceto os operadores || (\"ou\" lógico) e && (\"e\" lógico), que, se usados como valores não-booleanos, podem retornar, também, valores não booleanos.</p>\n<br>\n    <h2>\"E\" lógico (&&)</h2>\n    <p>O \"e\" lógico vai retornar o valor booleano <i>true</i> quando ambas as proposições ambas forem verdadeiras. Se pelo menos uma delas for falsa, o resultado é <i>false.</i></p>\n    <p>Por exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        console.log(2 &lt; 3 &amp;&amp; 3 &gt; 2) //imprime true\n        console.log(2 &lt; 3 &amp;&amp; 3 &lt; 2) //imprime false\n        console.log( 2 &lt; 3 &amp;&amp; 3 &gt; 2 &amp;&amp; 10 &lt;= 100)//usando mais de duas proposições - imprime true\n    </code></pre>\n<br>\n    <h2>\"Ou\" lógico (||)</h2>\n    <p>A principal diferença para o \"e\" lógico é que, no \"ou\" lógico, basta <b>uma</b> das proposições estar verdadeira que o resultado impresso é <i>true.</i></p>\n    <p>Por exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        console.log(2 &lt; 3 || 3 &gt; 2) //imprime true\n        console.log(2 &lt; 3 || 3 &lt; 2) // imprime true\n        console.log( 2 &lt; 3 || 3 &gt; 2 || 10 &lt;= 100)//imprime true\n    </code></pre>\n<br>\n    <h4>OBS: a lógica matemática temos o <b>ou exclusivo</b>, onde <b> somente uma das proposições é verdadeira</b>; se ambas forem verdadeiras, o resultado é <i>false</i>.</h4>\n<br>\n    <h2>Negação Lógica (!)</h2>\n    <p>A negação vai simplesmente <b>inverter</b> o valor booleano da proposição. Ou seja, se a proposição tem o valor <i>true</i>, a negação vai inverter para <i>false</i>, e vice-versa.</p>\n<br>\n    <h4>OBS: O uso de dupla negação (!!) volta a proposição para o seu <b>valor booleano de origem.</b></h4>\n    <p>Por exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        console.log(2 &lt; 3) //imprime true\n        console.log(!(2 &lt; 3)) //negação da afirmativa - imprime false\n        console.log(!!(2 &lt; 3)) //negação da negação, retorna para o valor original - imprime true\n    </code></pre>\n<br>\n    <h2>Operadores Unários</h2>\n    <p>Os operadores unários podem ter duas formas: prefixada, quando são usados <b>antes</b> do operando; e pós-fixada, quando são usados <b>depois</b> do operando.</p>\n    <p> A negação lógica do exemplo anterior é um tipo de operador unário. Além desses, nós temos o incremento (++) e o decremento (–). O (-) pode ser usado também antes de números para inverter o seu valor.</p>\n    <p>Por exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        num1 = 1\n        num2 = 2\n        num3 = 3\n        <br>\n        num1++ //forma pós-fixada\n        console.log(num1) //imprime 2 - sofreu incremento de uma unidade\n        <br>\n        --num2 //forma pré-fixada\n        console.log(num2) //imprime 1 - sofreu decremento de uma unidade\n        <br>\n        console.log(-num3) //imprime -3 - o número negativo equivalente\n    </code></pre>\n<br>\n    <h2>Operadores Ternários</h2>\n    <p>Por fim, os operadores ternários funcionam como simplificações de comparações if/else. Resume a mesma comparação a somente uma linha, tendo a seguinte interpretação:</p>\n    <p>\"A afirmação é verdadeira <b>?</b> se sim, retorne a primeira opção: se falso, retorne a segunda\".</p>\n    <p>Por exemplo:</p>\n    <pre class=\"wp-block-code\"><code>\n        const resultado = nota =&gt; nota &gt;= 7 ? 'Aprovado' : 'Reprovado'\n        //pergunta 'nota é maior ou igual a 7? se sim, retorne \"Aprovado\" : se não, retorne \"Reprovado\" ' \n        <br>\n        console.log(resultado(7.1)) //imprime Aprovado\n        console.log(resultado(6.7)) //imprime Reprovado\n    </code></pre>\n<br>\n    <p>Esse operador ternário também pode ser entendido da seguinte forma:</p>\n    <pre class=\"wp-block-code\"><code>\n        function resultado (nota){\n        if (nota &gt;= 7) {\n            return 'Aprovado'\n        } else {\n            return 'Reprovado'\n        }\n    }</code></pre>\n<br>\n    <p>Como deu para perceber, o operador ternário é bem mais resumido.</p>\n<br>\n    <p>Agora que você já conhece todos os operadores usados na construção de códigos em JavaScript, espero que fique mais claro o seu uso e funcionamento.</p>"
    },
    {
      "page": "js",
      "title": "FUNÇÕES",
      "img": "https://cdn.discordapp.com/attachments/880921564630114364/914538064712450128/Blocos_reutilizaveis.png",
      "subtitle": "Blocos reutilizáveis de código.",
      "article": "<p> Outro conceito essencial em código é função, que permitem que você armazene um pedaço de código que realiza uma simples tarefa dentro de um bloco, e então chama aquele código sempre que você precisar usá-lo com um curto comando em vez de ter que escrever o mesmo código multiplas vezes. Neste artigo nós vamos explorar conceitos fundamentais por trás das funções como sintaxe básica, como invocá-las e defini-las, escopo, e parâmetros. </p>\n<br>\n    <h2>Onde eu encontro funções?</h2>\n<br>\n    <p> Em JavaScript, você encontrará funções  em todos os lugares, de fato, nós vamos usar funções, nós só não falaremos sobre elas em abrangência. Agora está na hora, contudo, para falarmos sobre funções explicitamente, e realmente explorar sua sintaxe. </p>\n<br>\n    <p> Praticamente sempre que você faz uso de uma estrutura JavaScript em que tem um par de parenteses - <code>()</code> - e você <b>não</b> está usando uma estrutura embutida da linguagem como um for loop, while or do...while loop, ou <i>if...else statement</i>, você está fazendo uso de uma função. </p>\n<br>\n    <h2>Funções embutidas do navegador</h2>\n<br>\n    <p>Nós fizemos bastante uso de funções embutidas do navegador neste artigo. Toda vez que manipulamos uma string de texto, por exemplo:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> myText <span class=\"token operator\">=</span> <span class=\"token string\">'I am a string'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> newString <span class=\"token operator\">=</span> myText<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sausage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// the replace() string function takes a string,</span>\n        <span class=\"token comment\">// replaces one substring with another, and returns</span>\n        <span class=\"token comment\">// a new string with the replacement made</span>\n    </code></pre>\n<br>\n    <p>Ou toda vez que manipulamos uma lista:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'love'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'frogs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> madeAString <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>madeAString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// the join() function takes an array, joins</span>\n        <span class=\"token comment\">// all the array items together into a single</span>\n        <span class=\"token comment\">// string, and returns this new string</span>\n    </code></pre>\n<br>\n    <p>Ou toda vez que nós geramos um número aleatório:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> myNumber <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// the random() function generates a random</span>\n        <span class=\"token comment\">// number between 0 and 1, and returns that</span>\n        <span class=\"token comment\">// number</span>\n    </code></pre>\n<br>\n    <p>...nós usamos uma função.</p>\n<br>\n    <h4>Nota: Fique a vontade para inserir essas linhas no console JavaScript do navvegador para refamiliarizar-se com suas funcionalidades, se necessário.</h4>\n<br>\n    <p> A linguagem JavaScript tem muitas funções embutidas que o permitem fazer coisas úteis sem que você mesmo tenha que escrever aquele código. De fato, alguns dos códigos que você está chamando quando você <u>invoca</u> (uma palavra rebuscada para rodar, executar) uma função embutida de navegador não poderia ser escrita em JavaScript - muitas dessas funções são chamadas a partes de código base do navegador, que é escrita grandemente em <i>linguages</i> de sistema de baixo nível como C++, não linguagem Web como JavaScript. </p>\n<br>\n    <p>Tenha em mente que algumas funções embutidas de navegador não são parte do core da linguagem JavaScript - algumas são deffinidas como partes de APIs do navegador, que são construídas no topo da linguagem padrão para prover ainda mais funcionalidades. Nós olharemos o uso de APIs de navegador em mais detalhes em um módulo posterior. </p>\n<br>\n    <h2>Funções versus métodos</h2>\n<br>\n    <p>Uma coisa que devemos esclarescer antes de seguir em frente - tecnicamente falando, funções embutidas de navegador não são funções - elas são <b>métodos</b>. Isso pode soar um pouco assustador e confuso, mas não se preocupe, as palavras funções e métodos são largamente intercambeáveis, ao menos para nosso propósitos, neste estágio de nosso aprendizado. </p>\n<br>\n    <p>A distinção é que métodos são funções definidas dentro de objetos. Funções embutidas de navegador (métodos) e variáveis (que são chamadas <b>propriedades</b>) são armazenadas dentro de objetos estruturados, para se tornar o código mais estruturado e fácil de manipular. </p>\n<br>\n    <p>Você não precisa aprender sobre o funcionamento interno de objetos estruturados em JavaScript ainda, voccê pode esperar nosso módulo posterior que ensinará tudo sobre funcionamento interno de objetos, e como criar o seu próprio. Por hora nós só queremos esclarecer qualquer confusão póssível do método versus função, é provável que você encontre ambos termos enquanto você olhar os recursos disponível pela Web.</p>\n<br>\n    <h2>Funções personalizadas</h2>\n<br>\n    <p>Nós vimos também várias funções personalizadas no artigo até agora, definidas em seu código, não dentro do navegador. Sempre que você viu um nome personalizado entre parênteses logo após ele, você estava usando funções personalizadas. Incluimos a função personalizada <code>draw()</code> que era semelhante a essa: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        function</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">,</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'rgba(255,0,0,0.5)'</span><span class=\"token punctuation\">;</span>\n          ctx<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p> Esta função desenha 100 circulos aleatórios dentro de um elemento <code>&lt;canvas&gt;</code>. Toda vez que queremos fazer isso, nós podemos simplesmente invocar a função com isto: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token function\">\n        draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <p>ao invés de ter que escrever todo o código novamente todas as vezes que queremos repetí-lo. E funções podem conter qualquer código que você gosta, você pode até chamar outra função dentro das funções. A função acima por exemplo chama a função <code>random()</code> três vezes, o qual é definido pelo seguinte código: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        function</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Nós precisamos desta função porque a função embutida do navegador <i>Math.random()</i> só gera números decimais aleatórios entre 0 e 1. Nós queriamos um número aleatório inteiro entre 0 e um número especificado. </p>\n<br>\n    <h2>Invocando funções</h2>\n<br>\n    <p> Provavelmente você já tem conhecimento sobre iso agora, mas... para realmente usar uma função depois dela ter sido definida, você tem que rodá-la ou invocá-la. Isso é feito ao se incluir o nome da função em algum lugar do código, seguido por parênteses. </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <br>\n      <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// Chama a função um vez</span>\n    </code></pre>\n<br>\n    <h2>Funções anônimas</h2>\n<br>\n    <p>Você viu funções definidas e invocadas de maneiras ligeiramente diferentes. Até agora nós só criamos funções como esta:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Mas você também pode criar funções que não tem nome:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Isto é chamado <b>Função anônima</b> não tem nome. E também não fará nada em si mesma. Você geralmente cria funções anônimas junto com um manipulador de eventos, o exemplo a seguir poderia rodar o código dentro da função sempre que o botão associado é clicado: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> myButton <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<br>\n        myButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p> O exemplo acima requer que exista um elemento <code>&lt;Button&gt;</code> disponível na página para selecionar e clicar. Você já viu essa estrutura algumas vezes ao longo do artigo. </p>\n<br>\n    <p> Você também pode atribuir uma função anônima para ser o valor de uma variável, por exemplo: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> <span class=\"token function-variable function\">myGreeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Esta função agora pode ser invocada usando:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token function\">\n        myGreeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <p>Isso dá efetivamente um nome a função, você também pode atribuir uma função para ser o valor de múltiplas variáveis, por exemplo:</p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> <span class=\"token function-variable function\">anotherGreeting</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p> Esta função agora pode ser invocada usando qualquer das funções abaixo: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token function\">\n        myGreeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">anotherGreeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <p> Mas isso pode simplesmente ser confuso, então não faça. Quando criar funções, é melhor ficar com apenas uma forma: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        function</span> <span class=\"token function\">myGreeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p> De modo geral você irá usar funções anônimas só para rodar um código em resposta a um disparo de evento (como um botão a ser clicado) usaando um gerenciador de eventos. Novamente, isso é algo parecido com: </p>\n    <br>\n    <pre class=\"brush: js notranslate\"><code>\n        myButton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Eu posso colocar código aqui</span>\n        <span class=\"token comment\">// dentro o quanto eu quiser</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <h2>Parâmetro de funções</h2>\n<br>\n    <p>Algumas funções requerem <b>Parâmetros</b> a ser especificado quando você está invocando-os esses são valores que precisam ser inclusos dentro dos parênteses da função, o que é necessário para fazer seu trabalho apropriado. </p>\n<br>\n    <h4>Nota: Parâmetros algumas vezes são chamados de argumentos, propriedades, ou até atributos. </h4>\n<br>\n    <p> Como por exemplo, a função embutida de navegador <u>Math.random()</u> não requer nenhum parâmetro. Quando chamada, ela sempre retorna um número aleatório entre 0 e 1: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> myNumber <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <p>A função embutida de navegador <u><code>replace()</code></u> entretanto precisa de dois parâmetros, a substring para encontrar a string principal, e a substring para ser substituida com ela: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> myText <span class=\"token operator\">=</span> <span class=\"token string\">'I am a string'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> newString <span class=\"token operator\">=</span> myText<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sausage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </code></pre>\n<br>\n    <h4>Nota: Quando você precisa especificar multiplos parâmetros, eles são separados por vírgulas.</h4>\n<br>\n    <p> Nota-se também que algumas vezes os parâmetros são opcionais, você não tem que especificá-los. Se você não faz, a função geralmente adota algum tipo de comportamento padrão. Como exemplo, a função <u>join()</u> tem parâmetro opcional: </p>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token keyword\">\n        var</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'love'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'frogs'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> madeAString <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// returns 'I love chocolate frogs'</span>\n        <span class=\"token keyword\">var</span> madeAString <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// returns 'I,love,chocolate,frogs'</span>\n    </code></pre>\n<br>\n    <p>Se nenhum parâmetro é incluído para especificar a combinação/delimitação de caractere, uma vírgula é usada por padrão. </p>\n<br>\n    <h2>Função escopo e conflitos</h2>\n<br>\n    <p>Vamos falar um pouco sobre <u>scope</u>, um conceito muito importante quando lidamos com funções. Quando você cria uma função, as variáveis e outras coisas definidas dentro da função ficam dentro do seu próprio e separado do <u>escopo</u>, significando que eles estão trancados a parte em seu próprio compartimento, inacessível de dentro de outras funções ou de código fora das funções. </p>\n<br>\n    <p> O mais allto nível fora de todas suas funções é chamado de <b>escopo global</b>. Valores definidos no escopo global são acessíveis em todo lugar do código. </p>\n<br>\n    <p> JavaScript é configurado assim por várias razões, mas principalmente por segurança e organização. Algumas vezes você não quer que variáveis sejam acessadas de todo lugar no código, scripts externos que você chama de algum outro lugar podem iniciar uma bagunça no seu código e causar problemas porque eles estão usando os mesmos nomes de variáveis que em outras partes do código, provocando conflitos. Isso pode ser feito maliciosamente, ou só por acidente. </p>\n<br>\n    <p> Por exemplo, digamos que você tem um arquivo HTML que está chamando dois arquivos JavaScript externos, e ambos tem uma variável e uma função definidos que usam o mesmo nome: </p>\n<br>\n    <pre class=\"brush: html notranslate\"><code><span class=\"token comment\">\n        &lt;!-- Excerpt from my HTML --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>first.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>second.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n          <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    </code></pre>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token comment\">\n        // first.js</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Chris'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Olá '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">': bem-vindo a nossa compania.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <pre class=\"brush: js notranslate\"><code><span class=\"token comment\">\n        // second.js</span>\n        <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Zaptec'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nossa compania é chamada '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <p>Ambas as funções que você quer chamar são chamadas <code>greeting()</code>, mas você só pode acessar o arquivo <code>second.js</code> da função <code>greeting()</code>, ele é aplicado no HTML depois no código fonte, então suas variáveis e funções sobrescrevem as de <code>first.js</code>. </p>\n<br>\n    <p> Manter parte de seus código trancada em funções evita tais problemas, e é considerado boa prática. </p>\n<br>\n    <h2> Brincando com o escopo</h2>\n<br>\n    <p>Vamos observar um exemplo real para mostrar o escopo.</p>\n<br>\n    <ol>\n      <li>Primeiro, faça uma cópia local de nosso exmplo <a class=\"external\" rel=\" noopener\">function-scope.html</a>. Isto contém duas funções chamadas <code>a()</code> e <code>b()</code>, e três variáveis — <code>x</code>, <code>y</code>, e <code>z</code> — duas das quais estão definidas dentro de funções, e uma no escopo global. Ele também contém uma terceira função chamada <code>output()</code>, que leva um simples parâmetro e mostra-o em um parágrafo na página.</li>\n      <li>Abra o exemplo em um navegador e em um editor de textos.</li>\n      <li>Abra o console JavaScript no developer tools de seu navegador. No console&nbsp; JavaScript, digite o seguinte comando:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">\n          output</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        Você deve ver o valor da variável <code>x</code> exibida na página.\n      </li>\n      <li>Agora tente digitar o seguinte no seu console:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">\n          output</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">\n          output</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        Ambos dever retornar um erro com as seguintes linhas \"<a>ReferenceError: y is not defined</a>\". Por que isso? Porque o escopo da função — <code>y</code> e <code>z</code> estão trancadas dentro das funções <code>a()</code> e&nbsp; <code>b()</code>, então <code>output()</code> não pode acessá-las quando chamadas do escopo global.\n      </li>\n      <li>Contudo, que tal chamá-las de dentro de outra função? Tente editar <code>a()</code> e <code>b()</code> para que fiquem desta forma:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <br>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n        Salve o código e atualize o navegador, então tente chamar as funções <code>a()</code> e <code>b()</code> do console JavaScript:\n      <br>\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code><span class=\"token function\">\n          a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token function\">\n          b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        </code></pre></div>\n        Você verá os valores de <code>y</code> e <code>z</code> mostrados na página. <span class=\"short_text\" id=\"result_box\" lang=\"pt\"><span>Isso funciona bem</span></span>, desde que a função <code>output()</code> está sendo chamada dentro de outra função <span id=\"result_box\" lang=\"pt\"><span>no mesmo escopo que as variáveis que estam imprimindo são definidas</span></span>, em cada caso. <code>output()</code> em si é acessível de qualquer lugar, <span class=\"short_text\" id=\"result_box\" lang=\"pt\"><span>como é definido no escopo global.</span></span>\n      </li>\n<br>\n      <li>Agora tente atualizar seu código como este:\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\">\n        <code><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <br>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n        Salve e atualize novamente, e tente isso novamente em seu console JavaScript:</li>\n        <li>\n        <div class=\"code-example\"><pre class=\"brush: js notranslate\"><code>\n        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      </code></pre></div>\n          Ambas chamadas de <code>a()</code> e <code>b()</code> devem mostrar o valor de x - 1. Isso dá certo porque até mesmo a chamada de <code>output()</code> não está no mesmo escopo em que <code>x</code> é definido, <code>x</code> é uma variável global então é disponível dentro de todo código, em toda parte.</li>\n        <li>Finalmente, tente atualizar o código o seguinte:\n          <div class=\"code-example\"><pre class=\"brush: js notranslate\">\n          <code><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n          <br>\n          <span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      </code></pre></div>\n          Salve e atualize novamente, e tente isso novamente em seu console JavaScript:</li>\n    <br>\n          <li>\n          <div class=\"code-example\"><pre class=\"brush: js notranslate\">\n          <code><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n            Desta vez as chamadas de <code>a()</code> e <code>b()</code> retornaram o irritante erro \"<a>ReferenceError: z is not defined</a>\", isto porque a chamada de <code>output()</code> e as variáveis que eles estão tentando imprimir não estão definidas dentro do mesmo escopo das funções, as variáveis são efetivamente invisíveis aquelas chamadas de função.\n          </li>\n    </ol>\n<br>\n    <h2>Funções dentro de funções</h2>\n<br>\n    <p>Tenha em mente que você pode chamar uma função de qualquer lugar, até mesmo dentro de outra função. Isso é frequentemente usado para manter o código organizado, se você tem uma função grande e complexa, é mais fácil de entendê-la se você quebrá-la em várias subfunções:</p>\n      <pre class=\"brush: js notranslate\"><code>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">myBigFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> myValue<span class=\"token punctuation\">;</span>\n    <br>\n      <span class=\"token function\">subFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">subFunction2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">subFunction3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <br>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">subFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <br>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">subFunction2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <br>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">subFunction3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      </code></pre>\n<br>\n      <p>Apenas certifique-se que os valores usados dentro da função estão apropriadamente no escopo. O exemplo acima deve lançar um erro <code>ReferenceError: myValue is not defined</code>, porque apesar da variável <code>myValue</code> estar definida no mesmo escopo da chamada da função, ela não está definida dentro da definição da função, o código real que está rodando quando as funções são chamadas. Para fazer isso funcionar, você deveria passar o valor dentro da função como um parâmetro, desta forma: </p>\n<br>\n      <pre class=\"brush: js notranslate\"><code>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">myBigFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> myValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <br>\n        <span class=\"token function\">subFunction1</span><span class=\"token punctuation\">(</span>myValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">subFunction2</span><span class=\"token punctuation\">(</span>myValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">subFunction3</span><span class=\"token punctuation\">(</span>myValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <br>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">subFunction1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <br>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">subFunction2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <br>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">subFunction3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    </code></pre>\n<br>\n    <h2>Conclusão</h2>\n<br>\n    <p>Este arquivo explorou os conceitos fundamentais por trás das funções, pavimentando o caminho para o próximo no qual nos tornamos práticos e o levamos através de passos para construir suas próprias funções personalizadas.</p>"
    },
    {
      "page": "js",
      "title": "VALIDANDO FORMULÁRIOS JS",
      "img": "https://cdn.discordapp.com/attachments/880921564630114364/914538065190596688/Formularios_JS.png",
      "subtitle": "Como validar formulários utilizando JavaScript.",
      "article": "<p>Uma das tarefas mais importantes no desenvolvimento web é a validação de dados por meio de formulários. Imagine que você tem uma biblioteca para gerenciar e vai construir uma página de cadastro. Será necessário criar um formulário para receber as informações que o cliente irá repassar, como também, será necessário verificar se esses dados informados são válidos.</p>\n    <p>A validação pode ser feita quando os dados chegarem no servidor, porém, uma das práticas mais comuns para validação é com o uso de JavaScript, tendo em vista que, essa atividade vai ser realizada no navegador do cliente.</p>\n<br>\n    <h3>Criando um cadastro</h3>\n    <p>Vamos criar um formulário de cadastro de usuário de uma biblioteca para que possamos entender como esse processo pode ser realizado.</p>\n    <img alt=\"\" class=\"w jd je\" src=\"https://miro.medium.com/max/1400/1*5P65Tq0hXDi5T5rWzxG5hQ.png\" width=\"700\" height=\"545\" role=\"presentation\">\n<br>\n    <p>Após criar o layout do formulário, vamos fazer a validação dos dados que serão repassados. Primeiro precisamos recuperar os valores dos campos quando o usuário clicar no botão de “Enviar”. Adicionaremos o evento “onclick” no botão para chamar a função validar no JavaScript.</p>\n    <br>\n    <img alt=\"\" class=\"mw pe ef es eo ex w c\" width=\"700\" height=\"107\" role=\"presentation\" src=\"https://miro.medium.com/max/700/1*YazLKhC8u098jM4ZtILgVQ.png\" srcset=\"https://miro.medium.com/max/276/1*YazLKhC8u098jM4ZtILgVQ.png 276w, https://miro.medium.com/max/552/1*YazLKhC8u098jM4ZtILgVQ.png 552w, https://miro.medium.com/max/640/1*YazLKhC8u098jM4ZtILgVQ.png 640w, https://miro.medium.com/max/700/1*YazLKhC8u098jM4ZtILgVQ.png 700w\" sizes=\"700px\">\n    <br>\n    <p>Agora precisaremos do JavaScript para a validação. Vamos acrescentar a tag &lt;script&gt; para fazer essa tarefa.</p>\n<br>\n    <img alt=\"\" class=\"mw pe ef es eo ex w c\" width=\"285\" height=\"137\" role=\"presentation\" src=\"https://miro.medium.com/max/285/1*eyd4w_gG3aGIQxlo-GKCgQ.png\" srcset=\"https://miro.medium.com/max/276/1*eyd4w_gG3aGIQxlo-GKCgQ.png 276w, https://miro.medium.com/max/285/1*eyd4w_gG3aGIQxlo-GKCgQ.png 285w\" sizes=\"285px\">\n<br>\n    <p>Existem algumas maneiras de pegar os valores dos inputs com o JavaScript, porém, explicarei duas. A primeira maneira é usando os atributos <u>name</u>. Para isso, na primeira etapa devemos colocar esse mesmo atributo na tag do formulário de maneira abaixo...</p>\n<br>\n    <img alt=\"\" class=\"mw pe ef es eo ex w c\" width=\"700\" height=\"102\" role=\"presentation\" src=\"https://miro.medium.com/max/700/1*UafVH98K3GhQLSCm9VfzbQ.png\" srcset=\"https://miro.medium.com/max/276/1*UafVH98K3GhQLSCm9VfzbQ.png 276w, https://miro.medium.com/max/552/1*UafVH98K3GhQLSCm9VfzbQ.png 552w, https://miro.medium.com/max/640/1*UafVH98K3GhQLSCm9VfzbQ.png 640w, https://miro.medium.com/max/700/1*UafVH98K3GhQLSCm9VfzbQ.png 700w\" sizes=\"700px\">\n<br>\n    <p>A segunda etapa é colocar o <u>name</u> também nos inputs dos dados. Desta forma:</p>\n<br>\n    <img alt=\"\" class=\"mw pe ef es eo ex w c\" width=\"480\" height=\"202\" role=\"presentation\" src=\"https://miro.medium.com/max/480/1*Vbq4UOfrCR-Cx-PP64pQ9g.png\" srcset=\"https://miro.medium.com/max/276/1*Vbq4UOfrCR-Cx-PP64pQ9g.png 276w, https://miro.medium.com/max/480/1*Vbq4UOfrCR-Cx-PP64pQ9g.png 480w\" sizes=\"480px\">\n<br>\n    <p>A tercceira etapa é pegar os dados na função \"validar\" dentro do JavaScript.</p>\n<br>\n    <img alt=\"\" class=\"mw pe ef es eo ex w c\" width=\"608\" height=\"351\" role=\"presentation\" src=\"https://miro.medium.com/max/608/1*Emvj5z9Wf7ECWS9sY4oxQg.png\" srcset=\"https://miro.medium.com/max/276/1*Emvj5z9Wf7ECWS9sY4oxQg.png 276w, https://miro.medium.com/max/552/1*Emvj5z9Wf7ECWS9sY4oxQg.png 552w, https://miro.medium.com/max/608/1*Emvj5z9Wf7ECWS9sY4oxQg.png 608w\" sizes=\"608px\">\n<br>\n    <p>Na linha 87 foi declarado uma variável “nome” que recebe “formulario.nome” . De modo simples, pegamos o formulário com o name “formulario” e o input com <u>name</u> “nome”. Na linha 90, verificamos se o <u>value</u> desse input está vazio, caso esteja, vai ser informado o erro a variável nome vai receber o focus.</p>\n<br>\n    <img alt=\"\" class=\"mw pe ef es eo ex w c\" width=\"700\" height=\"394\" role=\"presentation\" src=\"https://miro.medium.com/max/700/1*18BT6CC7N05ZCAaO3hSnnw.gif\" srcset=\"https://miro.medium.com/max/276/1*18BT6CC7N05ZCAaO3hSnnw.gif 276w, https://miro.medium.com/max/552/1*18BT6CC7N05ZCAaO3hSnnw.gif 552w, https://miro.medium.com/max/640/1*18BT6CC7N05ZCAaO3hSnnw.gif 640w, https://miro.medium.com/max/700/1*18BT6CC7N05ZCAaO3hSnnw.gif 700w\" sizes=\"700px\">\n<br>\n    <p>A segunda maneira de pegar o valor de um campo é por meio de seu <u>id</u>. Vamos alterar um pouco a nossa função para pegar desta maneira:</p>\n<br>\n    <img alt=\"\" class=\"mw pe ef es eo ex w c\" width=\"700\" height=\"312\" role=\"presentation\" src=\"https://miro.medium.com/max/700/1*qU_jewsQjEOdctvkxjhgww.png\" srcset=\"https://miro.medium.com/max/276/1*qU_jewsQjEOdctvkxjhgww.png 276w, https://miro.medium.com/max/552/1*qU_jewsQjEOdctvkxjhgww.png 552w, https://miro.medium.com/max/640/1*qU_jewsQjEOdctvkxjhgww.png 640w, https://miro.medium.com/max/700/1*qU_jewsQjEOdctvkxjhgww.png 700w\" sizes=\"700px\">\n<br>\n    <p>Seria mais facil utilizar o segundo método por meio do id, mas acredito que não haja nenhuma diferença em desempenho da execução. Seguindo a mesma lógica, vamos fazer o mesmo para os outros campos, como no código abaixo:</p>\n<br>\n    <pre style=\"word-wrap: break-word; white-space: pre-wrap;\">/* Função Validar */\n        function validar() {\n          // pegando o valor do nome pelos names\n          var nome = document.getElementById(\"nome\");\n          var sobrenome = document.getElementById(\"sobrenome\");\n          var email = document.getElementById(\"email\");\n          var senha = document.getElementById(\"senha\");\n          var telefone = document.getElementById(\"telefone\");\n          var cep = document.getElementById(\"cep\");\n          var sexo = document.getElementById(\"sexo\");\n          var newsletter = document.getElementById(\"newsletter\").checked;\n        <br>\n          // verificar se o nome está vazio\n          if (nome.value == \"\") {\n            alert(\"Nome não informado\");\n        <br>\n            // Deixa o input com o focus\n            nome.focus();\n            // retorna a função e não olha as outras linhas\n            return;\n          }\n          if (sobrenome.value == \"\") {\n            alert(\"Sobrenome não informado\");\n            sobrenome.focus();\n            return;\n          }\n          if (email.value == \"\") {\n            alert(\"E-mail não informado\");\n            email.focus();\n            return;\n          }\n          if (senha.value == \"\") {\n            alert(\"Senha não informada\");\n            senha.focus();\n            return;\n          }\n          if (telefone.value == \"\") {\n            alert(\"Telefone não informado\");\n            telefone.focus();\n            return;\n          }\n          if (cep.value == \"\") {\n            alert(\"CEP não informado\");\n            cep.focus();\n            return;\n          }\n          if (sexo.value == \"\") {\n            alert(\"CEP não informado\");\n            sexo.focus();\n            return;\n          }\n          alert(\"Formulário enviado!\");\n          // envia o formulário\n          //formulario.submit();\n        }\n    </pre>\n<br>\n    <p>Agora já temos um formulário onde o usuário deve passar todos os dados. Podemos usar também os atributos de <u>\"required\"</u> do próprio HTML e fazer outras validações como o de e-mail ou CEP, mas vamos deixar para a próxima.</p>"
    }
  ]
}